;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Core : 
  module Type_Decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, r : UInt<1>, load : UInt<1>, store : UInt<1>, branch : UInt<1>, i : UInt<1>, jal : UInt<1>, jalr : UInt<1>, lui : UInt<1>}
    
    node _T_24 = eq(io.opcode, UInt<6>("h033")) @[Type_Decode.scala 15:18]
    when _T_24 : @[Type_Decode.scala 15:30]
      io.r <= UInt<1>("h01") @[Type_Decode.scala 16:10]
      io.load <= UInt<1>("h00") @[Type_Decode.scala 17:13]
      io.store <= UInt<1>("h00") @[Type_Decode.scala 18:14]
      io.branch <= UInt<1>("h00") @[Type_Decode.scala 19:15]
      io.i <= UInt<1>("h00") @[Type_Decode.scala 20:10]
      io.jalr <= UInt<1>("h00") @[Type_Decode.scala 21:13]
      io.jal <= UInt<1>("h00") @[Type_Decode.scala 22:12]
      io.lui <= UInt<1>("h00") @[Type_Decode.scala 23:12]
      skip @[Type_Decode.scala 15:30]
    else : @[Type_Decode.scala 24:35]
      node _T_34 = eq(io.opcode, UInt<2>("h03")) @[Type_Decode.scala 24:24]
      when _T_34 : @[Type_Decode.scala 24:35]
        io.load <= UInt<1>("h01") @[Type_Decode.scala 25:13]
        io.r <= UInt<1>("h00") @[Type_Decode.scala 26:10]
        io.store <= UInt<1>("h00") @[Type_Decode.scala 27:14]
        io.branch <= UInt<1>("h00") @[Type_Decode.scala 28:15]
        io.i <= UInt<1>("h00") @[Type_Decode.scala 29:10]
        io.jalr <= UInt<1>("h00") @[Type_Decode.scala 30:13]
        io.jal <= UInt<1>("h00") @[Type_Decode.scala 31:12]
        io.lui <= UInt<1>("h00") @[Type_Decode.scala 32:12]
        skip @[Type_Decode.scala 24:35]
      else : @[Type_Decode.scala 33:36]
        node _T_44 = eq(io.opcode, UInt<6>("h023")) @[Type_Decode.scala 33:24]
        when _T_44 : @[Type_Decode.scala 33:36]
          io.store <= UInt<1>("h01") @[Type_Decode.scala 34:14]
          io.r <= UInt<1>("h00") @[Type_Decode.scala 35:10]
          io.load <= UInt<1>("h00") @[Type_Decode.scala 36:13]
          io.branch <= UInt<1>("h00") @[Type_Decode.scala 37:15]
          io.i <= UInt<1>("h00") @[Type_Decode.scala 38:10]
          io.jalr <= UInt<1>("h00") @[Type_Decode.scala 39:13]
          io.jal <= UInt<1>("h00") @[Type_Decode.scala 40:12]
          io.lui <= UInt<1>("h00") @[Type_Decode.scala 41:12]
          skip @[Type_Decode.scala 33:36]
        else : @[Type_Decode.scala 42:36]
          node _T_54 = eq(io.opcode, UInt<7>("h063")) @[Type_Decode.scala 42:24]
          when _T_54 : @[Type_Decode.scala 42:36]
            io.branch <= UInt<1>("h01") @[Type_Decode.scala 43:15]
            io.r <= UInt<1>("h00") @[Type_Decode.scala 44:10]
            io.load <= UInt<1>("h00") @[Type_Decode.scala 45:13]
            io.store <= UInt<1>("h00") @[Type_Decode.scala 46:14]
            io.i <= UInt<1>("h00") @[Type_Decode.scala 47:10]
            io.jalr <= UInt<1>("h00") @[Type_Decode.scala 48:13]
            io.jal <= UInt<1>("h00") @[Type_Decode.scala 49:12]
            io.lui <= UInt<1>("h00") @[Type_Decode.scala 50:12]
            skip @[Type_Decode.scala 42:36]
          else : @[Type_Decode.scala 51:36]
            node _T_64 = eq(io.opcode, UInt<5>("h013")) @[Type_Decode.scala 51:24]
            when _T_64 : @[Type_Decode.scala 51:36]
              io.i <= UInt<1>("h01") @[Type_Decode.scala 52:10]
              io.r <= UInt<1>("h00") @[Type_Decode.scala 53:10]
              io.load <= UInt<1>("h00") @[Type_Decode.scala 54:13]
              io.store <= UInt<1>("h00") @[Type_Decode.scala 55:14]
              io.branch <= UInt<1>("h00") @[Type_Decode.scala 56:15]
              io.jalr <= UInt<1>("h00") @[Type_Decode.scala 57:13]
              io.jal <= UInt<1>("h00") @[Type_Decode.scala 58:12]
              io.lui <= UInt<1>("h00") @[Type_Decode.scala 59:12]
              skip @[Type_Decode.scala 51:36]
            else : @[Type_Decode.scala 60:36]
              node _T_74 = eq(io.opcode, UInt<7>("h067")) @[Type_Decode.scala 60:24]
              when _T_74 : @[Type_Decode.scala 60:36]
                io.jalr <= UInt<1>("h01") @[Type_Decode.scala 61:13]
                io.r <= UInt<1>("h00") @[Type_Decode.scala 62:10]
                io.load <= UInt<1>("h00") @[Type_Decode.scala 63:13]
                io.store <= UInt<1>("h00") @[Type_Decode.scala 64:14]
                io.branch <= UInt<1>("h00") @[Type_Decode.scala 65:15]
                io.i <= UInt<1>("h00") @[Type_Decode.scala 66:10]
                io.jal <= UInt<1>("h00") @[Type_Decode.scala 67:12]
                io.lui <= UInt<1>("h00") @[Type_Decode.scala 68:12]
                skip @[Type_Decode.scala 60:36]
              else : @[Type_Decode.scala 69:36]
                node _T_84 = eq(io.opcode, UInt<7>("h06f")) @[Type_Decode.scala 69:24]
                when _T_84 : @[Type_Decode.scala 69:36]
                  io.jal <= UInt<1>("h01") @[Type_Decode.scala 70:12]
                  io.r <= UInt<1>("h00") @[Type_Decode.scala 71:10]
                  io.load <= UInt<1>("h00") @[Type_Decode.scala 72:13]
                  io.store <= UInt<1>("h00") @[Type_Decode.scala 73:14]
                  io.branch <= UInt<1>("h00") @[Type_Decode.scala 74:15]
                  io.i <= UInt<1>("h00") @[Type_Decode.scala 75:10]
                  io.jalr <= UInt<1>("h00") @[Type_Decode.scala 76:13]
                  io.lui <= UInt<1>("h00") @[Type_Decode.scala 77:12]
                  skip @[Type_Decode.scala 69:36]
                else : @[Type_Decode.scala 78:36]
                  node _T_94 = eq(io.opcode, UInt<6>("h037")) @[Type_Decode.scala 78:24]
                  when _T_94 : @[Type_Decode.scala 78:36]
                    io.lui <= UInt<1>("h01") @[Type_Decode.scala 79:12]
                    io.r <= UInt<1>("h00") @[Type_Decode.scala 80:10]
                    io.load <= UInt<1>("h00") @[Type_Decode.scala 81:13]
                    io.store <= UInt<1>("h00") @[Type_Decode.scala 82:14]
                    io.branch <= UInt<1>("h00") @[Type_Decode.scala 83:15]
                    io.i <= UInt<1>("h00") @[Type_Decode.scala 84:10]
                    io.jalr <= UInt<1>("h00") @[Type_Decode.scala 85:13]
                    io.jal <= UInt<1>("h00") @[Type_Decode.scala 86:12]
                    skip @[Type_Decode.scala 78:36]
                  else : @[Type_Decode.scala 87:14]
                    io.r <= UInt<1>("h00") @[Type_Decode.scala 88:10]
                    io.load <= UInt<1>("h00") @[Type_Decode.scala 89:13]
                    io.store <= UInt<1>("h00") @[Type_Decode.scala 90:14]
                    io.branch <= UInt<1>("h00") @[Type_Decode.scala 91:15]
                    io.i <= UInt<1>("h00") @[Type_Decode.scala 92:10]
                    io.jalr <= UInt<1>("h00") @[Type_Decode.scala 93:13]
                    io.jal <= UInt<1>("h00") @[Type_Decode.scala 94:12]
                    io.lui <= UInt<1>("h00") @[Type_Decode.scala 95:12]
                    skip @[Type_Decode.scala 87:14]
    
  module ControlDecode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip r : UInt<1>, flip load : UInt<1>, flip store : UInt<1>, flip br : UInt<1>, flip i : UInt<1>, flip jal : UInt<1>, flip jalr : UInt<1>, flip lui : UInt<1>, memWrite : UInt<1>, branch : UInt<1>, memRead : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, aluOp : UInt<3>, oprA : UInt<2>, oprB : UInt<1>, extendSel : UInt<2>, nextPcSel : UInt<2>}
    
    node _T_42 = eq(io.r, UInt<1>("h01")) @[ControlDecode.scala 24:13]
    when _T_42 : @[ControlDecode.scala 24:21]
      io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 25:17]
      io.branch <= UInt<1>("h00") @[ControlDecode.scala 26:15]
      io.memRead <= UInt<1>("h00") @[ControlDecode.scala 27:16]
      io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 28:17]
      io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 29:17]
      io.aluOp <= UInt<1>("h00") @[ControlDecode.scala 30:14]
      io.oprA <= UInt<1>("h00") @[ControlDecode.scala 31:13]
      io.oprB <= UInt<1>("h00") @[ControlDecode.scala 32:13]
      io.extendSel <= UInt<1>("h00") @[ControlDecode.scala 33:18]
      io.nextPcSel <= UInt<1>("h00") @[ControlDecode.scala 34:18]
      skip @[ControlDecode.scala 24:21]
    else : @[ControlDecode.scala 35:30]
      node _T_54 = eq(io.load, UInt<1>("h01")) @[ControlDecode.scala 35:22]
      when _T_54 : @[ControlDecode.scala 35:30]
        io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 36:17]
        io.branch <= UInt<1>("h00") @[ControlDecode.scala 37:15]
        io.memRead <= UInt<1>("h01") @[ControlDecode.scala 38:16]
        io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 39:17]
        io.memToReg <= UInt<1>("h01") @[ControlDecode.scala 40:17]
        io.aluOp <= UInt<3>("h04") @[ControlDecode.scala 41:14]
        io.oprA <= UInt<1>("h00") @[ControlDecode.scala 42:13]
        io.oprB <= UInt<1>("h01") @[ControlDecode.scala 43:13]
        io.extendSel <= UInt<1>("h00") @[ControlDecode.scala 44:18]
        io.nextPcSel <= UInt<1>("h00") @[ControlDecode.scala 45:18]
        skip @[ControlDecode.scala 35:30]
      else : @[ControlDecode.scala 46:31]
        node _T_66 = eq(io.store, UInt<1>("h01")) @[ControlDecode.scala 46:23]
        when _T_66 : @[ControlDecode.scala 46:31]
          io.memWrite <= UInt<1>("h01") @[ControlDecode.scala 47:17]
          io.branch <= UInt<1>("h00") @[ControlDecode.scala 48:15]
          io.memRead <= UInt<1>("h00") @[ControlDecode.scala 49:16]
          io.regWrite <= UInt<1>("h00") @[ControlDecode.scala 50:17]
          io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 51:17]
          io.aluOp <= UInt<3>("h05") @[ControlDecode.scala 52:14]
          io.oprA <= UInt<1>("h00") @[ControlDecode.scala 53:13]
          io.oprB <= UInt<1>("h01") @[ControlDecode.scala 54:13]
          io.extendSel <= UInt<2>("h02") @[ControlDecode.scala 55:18]
          io.nextPcSel <= UInt<1>("h00") @[ControlDecode.scala 56:18]
          skip @[ControlDecode.scala 46:31]
        else : @[ControlDecode.scala 57:28]
          node _T_78 = eq(io.br, UInt<1>("h01")) @[ControlDecode.scala 57:20]
          when _T_78 : @[ControlDecode.scala 57:28]
            io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 58:17]
            io.branch <= UInt<1>("h01") @[ControlDecode.scala 59:15]
            io.memRead <= UInt<1>("h00") @[ControlDecode.scala 60:16]
            io.regWrite <= UInt<1>("h00") @[ControlDecode.scala 61:17]
            io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 62:17]
            io.aluOp <= UInt<2>("h02") @[ControlDecode.scala 63:14]
            io.oprA <= UInt<1>("h00") @[ControlDecode.scala 64:13]
            io.oprB <= UInt<1>("h00") @[ControlDecode.scala 65:13]
            io.extendSel <= UInt<1>("h00") @[ControlDecode.scala 66:18]
            io.nextPcSel <= UInt<1>("h01") @[ControlDecode.scala 67:18]
            skip @[ControlDecode.scala 57:28]
          else : @[ControlDecode.scala 68:30]
            node _T_90 = eq(io.jalr, UInt<1>("h01")) @[ControlDecode.scala 68:22]
            when _T_90 : @[ControlDecode.scala 68:30]
              io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 69:17]
              io.branch <= UInt<1>("h00") @[ControlDecode.scala 70:15]
              io.memRead <= UInt<1>("h00") @[ControlDecode.scala 71:16]
              io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 72:17]
              io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 73:17]
              io.aluOp <= UInt<2>("h03") @[ControlDecode.scala 74:14]
              io.oprA <= UInt<2>("h02") @[ControlDecode.scala 75:13]
              io.oprB <= UInt<1>("h00") @[ControlDecode.scala 76:13]
              io.extendSel <= UInt<1>("h00") @[ControlDecode.scala 77:18]
              io.nextPcSel <= UInt<2>("h03") @[ControlDecode.scala 78:18]
              skip @[ControlDecode.scala 68:30]
            else : @[ControlDecode.scala 79:27]
              node _T_102 = eq(io.i, UInt<1>("h01")) @[ControlDecode.scala 79:19]
              when _T_102 : @[ControlDecode.scala 79:27]
                io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 80:17]
                io.branch <= UInt<1>("h00") @[ControlDecode.scala 81:15]
                io.memRead <= UInt<1>("h00") @[ControlDecode.scala 82:16]
                io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 83:17]
                io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 84:17]
                io.aluOp <= UInt<1>("h01") @[ControlDecode.scala 85:14]
                io.oprA <= UInt<1>("h00") @[ControlDecode.scala 86:13]
                io.oprB <= UInt<1>("h01") @[ControlDecode.scala 87:13]
                io.extendSel <= UInt<1>("h00") @[ControlDecode.scala 88:18]
                io.nextPcSel <= UInt<1>("h00") @[ControlDecode.scala 89:18]
                skip @[ControlDecode.scala 79:27]
              else : @[ControlDecode.scala 90:29]
                node _T_114 = eq(io.jal, UInt<1>("h01")) @[ControlDecode.scala 90:21]
                when _T_114 : @[ControlDecode.scala 90:29]
                  io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 91:17]
                  io.branch <= UInt<1>("h00") @[ControlDecode.scala 92:15]
                  io.memRead <= UInt<1>("h00") @[ControlDecode.scala 93:16]
                  io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 94:17]
                  io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 95:17]
                  io.aluOp <= UInt<2>("h03") @[ControlDecode.scala 96:14]
                  io.oprA <= UInt<2>("h02") @[ControlDecode.scala 97:13]
                  io.oprB <= UInt<1>("h00") @[ControlDecode.scala 98:13]
                  io.extendSel <= UInt<1>("h00") @[ControlDecode.scala 99:18]
                  io.nextPcSel <= UInt<2>("h02") @[ControlDecode.scala 100:18]
                  skip @[ControlDecode.scala 90:29]
                else : @[ControlDecode.scala 101:29]
                  node _T_126 = eq(io.lui, UInt<1>("h01")) @[ControlDecode.scala 101:21]
                  when _T_126 : @[ControlDecode.scala 101:29]
                    io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 102:17]
                    io.branch <= UInt<1>("h00") @[ControlDecode.scala 103:15]
                    io.memRead <= UInt<1>("h00") @[ControlDecode.scala 104:16]
                    io.regWrite <= UInt<1>("h01") @[ControlDecode.scala 105:17]
                    io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 106:17]
                    io.aluOp <= UInt<3>("h06") @[ControlDecode.scala 107:14]
                    io.oprA <= UInt<2>("h03") @[ControlDecode.scala 108:13]
                    io.oprB <= UInt<1>("h01") @[ControlDecode.scala 109:13]
                    io.extendSel <= UInt<1>("h01") @[ControlDecode.scala 110:18]
                    io.nextPcSel <= UInt<1>("h00") @[ControlDecode.scala 111:18]
                    skip @[ControlDecode.scala 101:29]
                  else : @[ControlDecode.scala 112:14]
                    io.memWrite <= UInt<1>("h00") @[ControlDecode.scala 113:17]
                    io.branch <= UInt<1>("h00") @[ControlDecode.scala 114:15]
                    io.memRead <= UInt<1>("h00") @[ControlDecode.scala 115:16]
                    io.regWrite <= UInt<1>("h00") @[ControlDecode.scala 116:17]
                    io.memToReg <= UInt<1>("h00") @[ControlDecode.scala 117:17]
                    io.aluOp <= UInt<3>("h07") @[ControlDecode.scala 118:14]
                    io.oprA <= UInt<1>("h00") @[ControlDecode.scala 119:13]
                    io.oprB <= UInt<1>("h00") @[ControlDecode.scala 120:13]
                    io.extendSel <= UInt<1>("h00") @[ControlDecode.scala 121:18]
                    io.nextPcSel <= UInt<1>("h00") @[ControlDecode.scala 122:18]
                    skip @[ControlDecode.scala 112:14]
    
  module Control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, memWrite : UInt<1>, branch : UInt<1>, memRead : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, aluOp : UInt<3>, oprA : UInt<2>, oprB : UInt<1>, extendSel : UInt<2>, nextPcSel : UInt<2>}
    
    inst typeDecode of Type_Decode @[Control.scala 17:26]
    typeDecode.clock <= clock
    typeDecode.reset <= reset
    inst CtrlDecode of ControlDecode @[Control.scala 18:26]
    CtrlDecode.clock <= clock
    CtrlDecode.reset <= reset
    typeDecode.io.opcode <= io.opcode @[Control.scala 20:24]
    CtrlDecode.io.r <= typeDecode.io.r @[Control.scala 21:19]
    CtrlDecode.io.load <= typeDecode.io.load @[Control.scala 22:22]
    CtrlDecode.io.store <= typeDecode.io.store @[Control.scala 23:23]
    CtrlDecode.io.br <= typeDecode.io.branch @[Control.scala 24:20]
    CtrlDecode.io.i <= typeDecode.io.i @[Control.scala 25:19]
    CtrlDecode.io.jal <= typeDecode.io.jal @[Control.scala 26:21]
    CtrlDecode.io.jalr <= typeDecode.io.jalr @[Control.scala 27:22]
    CtrlDecode.io.lui <= typeDecode.io.lui @[Control.scala 28:21]
    io.memWrite <= CtrlDecode.io.memWrite @[Control.scala 29:15]
    io.branch <= CtrlDecode.io.branch @[Control.scala 30:13]
    io.memRead <= CtrlDecode.io.memRead @[Control.scala 31:14]
    io.regWrite <= CtrlDecode.io.regWrite @[Control.scala 32:15]
    io.memToReg <= CtrlDecode.io.memToReg @[Control.scala 33:15]
    io.aluOp <= CtrlDecode.io.aluOp @[Control.scala 34:12]
    io.oprA <= CtrlDecode.io.oprA @[Control.scala 35:11]
    io.oprB <= CtrlDecode.io.oprB @[Control.scala 36:11]
    io.extendSel <= CtrlDecode.io.extendSel @[Control.scala 37:16]
    io.nextPcSel <= CtrlDecode.io.nextPcSel @[Control.scala 38:16]
    
  module immGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ins : UInt<32>, flip pc : UInt<32>, S : SInt<32>, sb : SInt<32>, i : SInt<32>, uj : SInt<32>, u : SInt<32>}
    
    node imm31 = bits(io.ins, 31, 31) @[immGen.scala 15:21]
    node imm30 = bits(io.ins, 30, 25) @[immGen.scala 16:21]
    node imm24 = bits(io.ins, 24, 21) @[immGen.scala 17:21]
    node imm20 = bits(io.ins, 20, 20) @[immGen.scala 18:21]
    node imm19 = bits(io.ins, 19, 12) @[immGen.scala 19:21]
    node imm11 = bits(io.ins, 11, 8) @[immGen.scala 20:21]
    node imm7 = bits(io.ins, 7, 7) @[immGen.scala 21:20]
    node _T_19 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_22 = mux(_T_19, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_23 = cat(imm11, imm7) @[Cat.scala 30:58]
    node _T_24 = cat(_T_22, imm31) @[Cat.scala 30:58]
    node _T_25 = cat(_T_24, imm30) @[Cat.scala 30:58]
    node _T_26 = cat(_T_25, _T_23) @[Cat.scala 30:58]
    node _T_27 = asSInt(_T_26) @[immGen.scala 23:54]
    io.S <= _T_27 @[immGen.scala 23:8]
    node _T_28 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_31 = mux(_T_28, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node _T_32 = cat(imm24, imm20) @[Cat.scala 30:58]
    node _T_33 = cat(_T_31, imm31) @[Cat.scala 30:58]
    node _T_34 = cat(_T_33, imm30) @[Cat.scala 30:58]
    node _T_35 = cat(_T_34, _T_32) @[Cat.scala 30:58]
    node _T_36 = asSInt(_T_35) @[immGen.scala 24:55]
    io.i <= _T_36 @[immGen.scala 24:8]
    node _T_37 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_40 = mux(_T_37, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _T_42 = cat(imm30, imm11) @[Cat.scala 30:58]
    node _T_43 = cat(_T_42, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_44 = cat(_T_40, imm31) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, imm7) @[Cat.scala 30:58]
    node _T_46 = cat(_T_45, _T_43) @[Cat.scala 30:58]
    node _T_47 = add(_T_46, io.pc) @[immGen.scala 25:60]
    node _T_48 = tail(_T_47, 1) @[immGen.scala 25:60]
    node _T_49 = asSInt(_T_48) @[immGen.scala 25:69]
    io.sb <= _T_49 @[immGen.scala 25:9]
    node _T_50 = cat(imm20, imm19) @[Cat.scala 30:58]
    node _T_51 = cat(imm31, imm30) @[Cat.scala 30:58]
    node _T_52 = cat(_T_51, imm24) @[Cat.scala 30:58]
    node _T_53 = cat(_T_52, _T_50) @[Cat.scala 30:58]
    node _T_55 = dshl(_T_53, UInt<4>("h0c")) @[immGen.scala 26:47]
    node _T_56 = asSInt(_T_55) @[immGen.scala 26:56]
    io.u <= _T_56 @[immGen.scala 26:8]
    node _T_57 = bits(imm31, 0, 0) @[Bitwise.scala 72:15]
    node _T_60 = mux(_T_57, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _T_62 = cat(imm30, imm24) @[Cat.scala 30:58]
    node _T_63 = cat(_T_62, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_64 = cat(imm19, imm20) @[Cat.scala 30:58]
    node _T_65 = cat(_T_60, imm31) @[Cat.scala 30:58]
    node _T_66 = cat(_T_65, _T_64) @[Cat.scala 30:58]
    node _T_67 = cat(_T_66, _T_63) @[Cat.scala 30:58]
    node _T_68 = add(_T_67, io.pc) @[immGen.scala 27:67]
    node _T_69 = tail(_T_68, 1) @[immGen.scala 27:67]
    node _T_70 = asSInt(_T_69) @[immGen.scala 27:76]
    io.uj <= _T_70 @[immGen.scala 27:9]
    
  module AluControl : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip ALUop : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<1>, out : UInt<5>}
    
    node _T_14 = eq(io.ALUop, UInt<1>("h00")) @[AluControl.scala 11:17]
    when _T_14 : @[AluControl.scala 11:30]
      node _T_16 = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
      node _T_17 = cat(_T_16, io.func3) @[Cat.scala 30:58]
      io.out <= _T_17 @[AluControl.scala 12:12]
      skip @[AluControl.scala 11:30]
    else : @[AluControl.scala 13:36]
      node _T_19 = eq(io.ALUop, UInt<2>("h03")) @[AluControl.scala 13:23]
      when _T_19 : @[AluControl.scala 13:36]
        io.out <= UInt<5>("h01f") @[AluControl.scala 14:12]
        skip @[AluControl.scala 13:36]
      else : @[AluControl.scala 15:36]
        node _T_22 = eq(io.ALUop, UInt<3>("h04")) @[AluControl.scala 15:23]
        when _T_22 : @[AluControl.scala 15:36]
          io.out <= UInt<1>("h00") @[AluControl.scala 16:12]
          skip @[AluControl.scala 15:36]
        else : @[AluControl.scala 17:37]
          node _T_25 = eq(io.ALUop, UInt<1>("h01")) @[AluControl.scala 17:23]
          when _T_25 : @[AluControl.scala 17:37]
            node _T_27 = eq(io.func3, UInt<3>("h05")) @[AluControl.scala 19:19]
            when _T_27 : @[AluControl.scala 19:32]
              node _T_29 = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
              node _T_30 = cat(_T_29, io.func3) @[Cat.scala 30:58]
              io.out <= _T_30 @[AluControl.scala 20:14]
              skip @[AluControl.scala 19:32]
            else : @[AluControl.scala 21:16]
              node _T_32 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
              io.out <= _T_32 @[AluControl.scala 22:14]
              skip @[AluControl.scala 21:16]
            skip @[AluControl.scala 17:37]
          else : @[AluControl.scala 24:36]
            node _T_34 = eq(io.ALUop, UInt<3>("h05")) @[AluControl.scala 24:23]
            when _T_34 : @[AluControl.scala 24:36]
              io.out <= UInt<1>("h00") @[AluControl.scala 25:12]
              skip @[AluControl.scala 24:36]
            else : @[AluControl.scala 26:62]
              node _T_37 = eq(io.ALUop, UInt<2>("h02")) @[AluControl.scala 26:23]
              node _T_39 = eq(io.func3, UInt<1>("h00")) @[AluControl.scala 26:48]
              node _T_40 = and(_T_37, _T_39) @[AluControl.scala 26:36]
              when _T_40 : @[AluControl.scala 26:62]
                node _T_42 = cat(UInt<2>("h02"), io.func3) @[Cat.scala 30:58]
                io.out <= _T_42 @[AluControl.scala 27:12]
                skip @[AluControl.scala 26:62]
              else : @[AluControl.scala 28:36]
                node _T_44 = eq(io.ALUop, UInt<3>("h06")) @[AluControl.scala 28:23]
                when _T_44 : @[AluControl.scala 28:36]
                  io.out <= UInt<1>("h00") @[AluControl.scala 29:12]
                  skip @[AluControl.scala 28:36]
                else : @[AluControl.scala 30:14]
                  io.out is invalid @[AluControl.scala 31:12]
                  skip @[AluControl.scala 30:14]
    
  module Alu : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<32>, flip b : SInt<32>, flip aluControl : UInt<5>, branch : UInt<1>, aluOut : SInt<32>}
    
    node _T_16 = eq(io.aluControl, UInt<1>("h00")) @[Alu.scala 11:22]
    when _T_16 : @[Alu.scala 11:37]
      node _T_17 = add(io.a, io.b) @[Alu.scala 12:24]
      node _T_18 = tail(_T_17, 1) @[Alu.scala 12:24]
      node _T_19 = asSInt(_T_18) @[Alu.scala 12:24]
      io.aluOut <= _T_19 @[Alu.scala 12:15]
      skip @[Alu.scala 11:37]
    else : @[Alu.scala 13:43]
      node _T_21 = eq(io.aluControl, UInt<1>("h01")) @[Alu.scala 13:28]
      when _T_21 : @[Alu.scala 13:43]
        node _T_22 = bits(io.b, 4, 0) @[Alu.scala 14:30]
        node _T_23 = dshl(io.a, _T_22) @[Alu.scala 15:23]
        io.aluOut <= _T_23 @[Alu.scala 15:15]
        skip @[Alu.scala 13:43]
      else : @[Alu.scala 16:43]
        node _T_25 = eq(io.aluControl, UInt<2>("h02")) @[Alu.scala 16:28]
        when _T_25 : @[Alu.scala 16:43]
          node _T_26 = lt(io.a, io.b) @[Alu.scala 17:15]
          when _T_26 : @[Alu.scala 17:22]
            io.aluOut <= asSInt(UInt<2>("h01")) @[Alu.scala 18:17]
            skip @[Alu.scala 17:22]
          else : @[Alu.scala 19:16]
            io.aluOut <= asSInt(UInt<1>("h00")) @[Alu.scala 20:17]
            skip @[Alu.scala 19:16]
          skip @[Alu.scala 16:43]
        else : @[Alu.scala 22:43]
          node _T_30 = eq(io.aluControl, UInt<3>("h04")) @[Alu.scala 22:28]
          when _T_30 : @[Alu.scala 22:43]
            node _T_31 = xor(io.a, io.b) @[Alu.scala 23:23]
            node _T_32 = asSInt(_T_31) @[Alu.scala 23:23]
            io.aluOut <= _T_32 @[Alu.scala 23:15]
            skip @[Alu.scala 22:43]
          else : @[Alu.scala 24:75]
            node _T_34 = eq(io.aluControl, UInt<2>("h03")) @[Alu.scala 24:28]
            node _T_36 = eq(io.aluControl, UInt<5>("h016")) @[Alu.scala 24:60]
            node _T_37 = or(_T_34, _T_36) @[Alu.scala 24:43]
            when _T_37 : @[Alu.scala 24:75]
              node _T_38 = asUInt(io.a) @[Alu.scala 25:15]
              node _T_39 = asUInt(io.b) @[Alu.scala 25:29]
              node _T_40 = lt(_T_38, _T_39) @[Alu.scala 25:22]
              when _T_40 : @[Alu.scala 25:36]
                io.aluOut <= asSInt(UInt<2>("h01")) @[Alu.scala 26:17]
                skip @[Alu.scala 25:36]
              else : @[Alu.scala 27:16]
                io.aluOut <= asSInt(UInt<1>("h00")) @[Alu.scala 28:17]
                skip @[Alu.scala 27:16]
              skip @[Alu.scala 24:75]
            else : @[Alu.scala 30:43]
              node _T_44 = eq(io.aluControl, UInt<3>("h05")) @[Alu.scala 30:28]
              when _T_44 : @[Alu.scala 30:43]
                node _T_45 = bits(io.b, 4, 0) @[Alu.scala 31:30]
                node _T_46 = dshr(io.a, _T_45) @[Alu.scala 32:23]
                io.aluOut <= _T_46 @[Alu.scala 32:15]
                skip @[Alu.scala 30:43]
              else : @[Alu.scala 33:43]
                node _T_48 = eq(io.aluControl, UInt<3>("h06")) @[Alu.scala 33:28]
                when _T_48 : @[Alu.scala 33:43]
                  node _T_49 = or(io.a, io.b) @[Alu.scala 34:23]
                  node _T_50 = asSInt(_T_49) @[Alu.scala 34:23]
                  io.aluOut <= _T_50 @[Alu.scala 34:15]
                  skip @[Alu.scala 33:43]
                else : @[Alu.scala 35:43]
                  node _T_52 = eq(io.aluControl, UInt<3>("h07")) @[Alu.scala 35:28]
                  when _T_52 : @[Alu.scala 35:43]
                    node _T_53 = and(io.a, io.b) @[Alu.scala 36:23]
                    node _T_54 = asSInt(_T_53) @[Alu.scala 36:23]
                    io.aluOut <= _T_54 @[Alu.scala 36:15]
                    skip @[Alu.scala 35:43]
                  else : @[Alu.scala 37:43]
                    node _T_56 = eq(io.aluControl, UInt<4>("h08")) @[Alu.scala 37:28]
                    when _T_56 : @[Alu.scala 37:43]
                      node _T_57 = sub(io.a, io.b) @[Alu.scala 38:23]
                      node _T_58 = tail(_T_57, 1) @[Alu.scala 38:23]
                      node _T_59 = asSInt(_T_58) @[Alu.scala 38:23]
                      io.aluOut <= _T_59 @[Alu.scala 38:15]
                      skip @[Alu.scala 37:43]
                    else : @[Alu.scala 39:43]
                      node _T_61 = eq(io.aluControl, UInt<4>("h0d")) @[Alu.scala 39:28]
                      when _T_61 : @[Alu.scala 39:43]
                        node _T_62 = bits(io.b, 4, 0) @[Alu.scala 40:38]
                        node _T_63 = dshr(io.a, _T_62) @[Alu.scala 41:23]
                        io.aluOut <= _T_63 @[Alu.scala 41:15]
                        skip @[Alu.scala 39:43]
                      else : @[Alu.scala 42:43]
                        node _T_65 = eq(io.aluControl, UInt<5>("h010")) @[Alu.scala 42:28]
                        when _T_65 : @[Alu.scala 42:43]
                          node _T_66 = eq(io.a, io.b) @[Alu.scala 43:15]
                          when _T_66 : @[Alu.scala 43:24]
                            io.aluOut <= asSInt(UInt<2>("h01")) @[Alu.scala 44:17]
                            skip @[Alu.scala 43:24]
                          else : @[Alu.scala 45:16]
                            io.aluOut <= asSInt(UInt<1>("h00")) @[Alu.scala 46:17]
                            skip @[Alu.scala 45:16]
                          skip @[Alu.scala 42:43]
                        else : @[Alu.scala 48:43]
                          node _T_70 = eq(io.aluControl, UInt<5>("h011")) @[Alu.scala 48:28]
                          when _T_70 : @[Alu.scala 48:43]
                            node _T_71 = neq(io.a, io.b) @[Alu.scala 49:15]
                            when _T_71 : @[Alu.scala 49:24]
                              io.aluOut <= asSInt(UInt<2>("h01")) @[Alu.scala 50:17]
                              skip @[Alu.scala 49:24]
                            else : @[Alu.scala 51:16]
                              io.aluOut <= asSInt(UInt<1>("h00")) @[Alu.scala 52:17]
                              skip @[Alu.scala 51:16]
                            skip @[Alu.scala 48:43]
                          else : @[Alu.scala 54:43]
                            node _T_75 = eq(io.aluControl, UInt<5>("h014")) @[Alu.scala 54:28]
                            when _T_75 : @[Alu.scala 54:43]
                              node _T_76 = lt(io.a, io.b) @[Alu.scala 55:15]
                              when _T_76 : @[Alu.scala 55:22]
                                io.aluOut <= asSInt(UInt<2>("h01")) @[Alu.scala 56:17]
                                skip @[Alu.scala 55:22]
                              else : @[Alu.scala 57:16]
                                io.aluOut <= asSInt(UInt<1>("h00")) @[Alu.scala 58:17]
                                skip @[Alu.scala 57:16]
                              skip @[Alu.scala 54:43]
                            else : @[Alu.scala 60:43]
                              node _T_80 = eq(io.aluControl, UInt<5>("h015")) @[Alu.scala 60:28]
                              when _T_80 : @[Alu.scala 60:43]
                                node _T_81 = gt(io.a, io.b) @[Alu.scala 61:15]
                                when _T_81 : @[Alu.scala 61:22]
                                  io.aluOut <= asSInt(UInt<2>("h01")) @[Alu.scala 62:17]
                                  skip @[Alu.scala 61:22]
                                else : @[Alu.scala 63:16]
                                  io.aluOut <= asSInt(UInt<1>("h00")) @[Alu.scala 64:17]
                                  skip @[Alu.scala 63:16]
                                skip @[Alu.scala 60:43]
                              else : @[Alu.scala 66:43]
                                node _T_85 = eq(io.aluControl, UInt<5>("h017")) @[Alu.scala 66:28]
                                when _T_85 : @[Alu.scala 66:43]
                                  node _T_86 = geq(io.a, io.b) @[Alu.scala 67:15]
                                  when _T_86 : @[Alu.scala 67:23]
                                    io.aluOut <= asSInt(UInt<2>("h01")) @[Alu.scala 68:17]
                                    skip @[Alu.scala 67:23]
                                  else : @[Alu.scala 69:16]
                                    io.aluOut <= asSInt(UInt<1>("h00")) @[Alu.scala 70:17]
                                    skip @[Alu.scala 69:16]
                                  skip @[Alu.scala 66:43]
                                else : @[Alu.scala 72:43]
                                  node _T_90 = eq(io.aluControl, UInt<5>("h01f")) @[Alu.scala 72:28]
                                  when _T_90 : @[Alu.scala 72:43]
                                    io.aluOut <= io.a @[Alu.scala 73:15]
                                    skip @[Alu.scala 72:43]
                                  else : @[Alu.scala 74:14]
                                    io.aluOut is invalid @[Alu.scala 75:15]
                                    skip @[Alu.scala 74:14]
    node _T_92 = eq(io.aluOut, asSInt(UInt<2>("h01"))) @[Alu.scala 78:18]
    node _T_93 = bits(io.aluControl, 4, 3) @[Alu.scala 78:42]
    node _T_95 = eq(_T_93, UInt<2>("h02")) @[Alu.scala 78:48]
    node _T_96 = and(_T_92, _T_95) @[Alu.scala 78:26]
    when _T_96 : @[Alu.scala 78:60]
      io.branch <= UInt<1>("h01") @[Alu.scala 79:17]
      skip @[Alu.scala 78:60]
    else : @[Alu.scala 80:14]
      io.branch <= UInt<1>("h00") @[Alu.scala 81:15]
      skip @[Alu.scala 80:14]
    
  module registerFile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip regWrite : UInt<1>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip rd_sel : UInt<5>, flip writeData : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    reg registers : SInt<32>[32], clock @[registerFile.scala 14:22]
    registers[0] <= asSInt(UInt<1>("h00")) @[registerFile.scala 15:16]
    io.rs1 <= registers[io.rs1_sel] @[registerFile.scala 16:10]
    io.rs2 <= registers[io.rs2_sel] @[registerFile.scala 17:10]
    node _T_60 = eq(io.regWrite, UInt<1>("h01")) @[registerFile.scala 18:20]
    when _T_60 : @[registerFile.scala 18:28]
      node _T_62 = eq(io.rd_sel, UInt<1>("h00")) @[registerFile.scala 19:20]
      when _T_62 : @[registerFile.scala 19:35]
        registers[0] <= asSInt(UInt<1>("h00")) @[registerFile.scala 20:20]
        skip @[registerFile.scala 19:35]
      else : @[registerFile.scala 21:16]
        registers[io.rd_sel] <= io.writeData @[registerFile.scala 22:28]
        skip @[registerFile.scala 21:16]
      skip @[registerFile.scala 18:28]
    
  module InsMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<32>, rdData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[InsMem.scala 9:16]
    node _T_11 = bits(io.wrAddr, 9, 0) @[InsMem.scala 10:19]
    infer mport _T_12 = mem[_T_11], clock @[InsMem.scala 10:19]
    io.rdData <= _T_12 @[InsMem.scala 10:13]
    
  module PC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[PC.scala 10:20]
    reg <= io.input @[PC.scala 11:7]
    node _T_14 = add(reg, UInt<3>("h04")) @[PC.scala 12:17]
    node _T_15 = tail(_T_14, 1) @[PC.scala 12:17]
    io.pc4 <= _T_15 @[PC.scala 12:10]
    io.pc <= reg @[PC.scala 13:9]
    
  module JalrTarget : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip imm : SInt<32>, flip rs1 : SInt<32>, out : SInt<32>}
    
    node _T_11 = add(io.imm, io.rs1) @[JalrTarget.scala 9:22]
    node _T_12 = tail(_T_11, 1) @[JalrTarget.scala 9:22]
    node _T_13 = asSInt(_T_12) @[JalrTarget.scala 9:22]
    node _T_15 = and(_T_13, asSInt(UInt<33>("h0fffffffe"))) @[JalrTarget.scala 9:32]
    node _T_16 = asSInt(_T_15) @[JalrTarget.scala 9:32]
    io.out <= _T_16 @[JalrTarget.scala 9:10]
    
  module DataMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip load : UInt<1>, flip store : UInt<1>, flip addrr : UInt<8>, flip storedata : SInt<32>, dataOut : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[DataMem.scala 12:16]
    node _T_18 = eq(io.load, UInt<1>("h01")) @[DataMem.scala 13:16]
    when _T_18 : @[DataMem.scala 13:24]
      infer mport _T_19 = mem[io.addrr], clock @[DataMem.scala 14:22]
      io.dataOut <= _T_19 @[DataMem.scala 14:16]
      skip @[DataMem.scala 13:24]
    else : @[DataMem.scala 15:14]
      io.dataOut is invalid @[DataMem.scala 16:16]
      skip @[DataMem.scala 15:14]
    node _T_21 = eq(io.store, UInt<1>("h01")) @[DataMem.scala 18:17]
    when _T_21 : @[DataMem.scala 18:25]
      infer mport _T_22 = mem[io.addrr], clock @[DataMem.scala 19:8]
      _T_22 <= io.storedata @[DataMem.scala 19:19]
      skip @[DataMem.scala 18:25]
    else : @[DataMem.scala 20:14]
      io.dataOut is invalid @[DataMem.scala 21:16]
      skip @[DataMem.scala 20:14]
    
  module IF_Pipeline : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip ins_in : UInt<32>, pc_out : UInt<32>, ins_out : UInt<32>, pc4_out : UInt<32>}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_Pipeline.scala 20:29]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_Pipeline.scala 21:30]
    reg reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_Pipeline.scala 22:30]
    reg_pc <= io.pc_in @[IF_Pipeline.scala 24:16]
    reg_pc4 <= io.pc4_in @[IF_Pipeline.scala 25:17]
    reg_ins <= io.ins_in @[IF_Pipeline.scala 26:17]
    io.pc_out <= reg_pc @[IF_Pipeline.scala 28:19]
    io.pc4_out <= reg_pc4 @[IF_Pipeline.scala 29:20]
    io.ins_out <= reg_ins @[IF_Pipeline.scala 30:20]
    
  module ID_Pipeline : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_sel_in : UInt<5>, flip rs2_sel_in : UInt<5>, flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip operandA_in : SInt<32>, flip operandB_in : SInt<32>, flip rd_in : UInt<5>, flip strData_in : SInt<32>, flip aluCtrl_in : UInt<5>, flip regWrite_in : UInt<1>, flip opr_A_sel_in : UInt<2>, flip opr_B_sel_in : UInt<1>, rs1_sel_Out : UInt<5>, rs2_sel_Out : UInt<5>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, operandA_out : SInt<32>, operandB_out : SInt<32>, rd_out : UInt<5>, strData_out : SInt<32>, aluCtrl_out : UInt<5>, regWrite_out : UInt<1>, opr_A_sel_Out : UInt<2>, opr_B_sel_Out : UInt<1>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_Pipeline.scala 45:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_Pipeline.scala 46:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_Pipeline.scala 47:35]
    reg reg_operandA : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_Pipeline.scala 48:35]
    reg reg_operandB : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_Pipeline.scala 49:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_Pipeline.scala 50:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_Pipeline.scala 51:34]
    reg reg_aluCtrl : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_Pipeline.scala 52:34]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_Pipeline.scala 53:35]
    reg reg_rs1 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_Pipeline.scala 54:30]
    reg reg_rs2 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_Pipeline.scala 55:30]
    reg reg_rs1_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_Pipeline.scala 56:34]
    reg reg_rs2_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_Pipeline.scala 57:34]
    reg reg_opr_A : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_Pipeline.scala 58:32]
    reg reg_opr_B : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_Pipeline.scala 59:32]
    reg_memWrite <= io.memWrite_in @[ID_Pipeline.scala 64:22]
    reg_memRead <= io.memRead_in @[ID_Pipeline.scala 65:21]
    reg_memToReg <= io.memToReg_in @[ID_Pipeline.scala 66:22]
    reg_operandA <= io.operandA_in @[ID_Pipeline.scala 67:22]
    reg_operandB <= io.operandB_in @[ID_Pipeline.scala 68:22]
    reg_rd <= io.rd_in @[ID_Pipeline.scala 69:16]
    reg_strData <= io.strData_in @[ID_Pipeline.scala 70:21]
    reg_aluCtrl <= io.aluCtrl_in @[ID_Pipeline.scala 71:21]
    reg_regWrite <= io.regWrite_in @[ID_Pipeline.scala 72:22]
    reg_rs1_sel <= io.rs1_sel_in @[ID_Pipeline.scala 73:21]
    reg_rs2_sel <= io.rs2_sel_in @[ID_Pipeline.scala 74:21]
    reg_opr_A <= io.opr_A_sel_in @[ID_Pipeline.scala 75:19]
    reg_opr_B <= io.opr_B_sel_in @[ID_Pipeline.scala 76:19]
    io.rs1_sel_Out <= reg_rs1_sel @[ID_Pipeline.scala 81:24]
    io.rs2_sel_Out <= reg_rs2_sel @[ID_Pipeline.scala 82:24]
    io.memWrite_out <= reg_memWrite @[ID_Pipeline.scala 83:25]
    io.memRead_out <= reg_memRead @[ID_Pipeline.scala 84:24]
    io.memToReg_out <= reg_memToReg @[ID_Pipeline.scala 85:25]
    io.operandA_out <= reg_operandA @[ID_Pipeline.scala 86:25]
    io.operandB_out <= reg_operandB @[ID_Pipeline.scala 87:25]
    io.rd_out <= reg_rd @[ID_Pipeline.scala 88:19]
    io.strData_out <= reg_strData @[ID_Pipeline.scala 89:24]
    io.aluCtrl_out <= reg_aluCtrl @[ID_Pipeline.scala 90:24]
    io.regWrite_out <= reg_regWrite @[ID_Pipeline.scala 91:25]
    io.opr_A_sel_Out <= reg_opr_A @[ID_Pipeline.scala 92:26]
    io.opr_B_sel_Out <= reg_opr_B @[ID_Pipeline.scala 93:26]
    
  module Ex_Pipeline : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_sel_in : UInt<5>, flip rs2_sel_in : UInt<5>, flip memWrite_in : UInt<1>, flip memRead_in : UInt<1>, flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip aluOutput_in : SInt<32>, flip strData_in : SInt<32>, flip regWrite_in : UInt<1>, flip alu_Output_input : SInt<32>, flip alu_branch_output_input : UInt<1>, flip rs1_in : SInt<32>, flip rs2_in : SInt<32>, rs1_sel_Out : UInt<5>, rs2_sel_Out : UInt<5>, memWrite_out : UInt<1>, memRead_out : UInt<1>, memToReg_out : UInt<1>, rd_out : UInt<5>, strData_out : SInt<32>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>, alu_Output_output : SInt<32>, alu_branch_output_output : UInt<1>, rs1_out : SInt<32>, rs2_out : SInt<32>}
    
    reg reg_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Ex_Pipeline.scala 38:35]
    reg reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Ex_Pipeline.scala 39:34]
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Ex_Pipeline.scala 40:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Ex_Pipeline.scala 41:29]
    reg reg_strData : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Ex_Pipeline.scala 42:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Ex_Pipeline.scala 43:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Ex_Pipeline.scala 44:35]
    reg alu_Output : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Ex_Pipeline.scala 45:27]
    reg alu_branch_output : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Ex_Pipeline.scala 46:34]
    reg reg_rs1_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Ex_Pipeline.scala 47:34]
    reg reg_rs2_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Ex_Pipeline.scala 48:34]
    reg reg_rs1 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Ex_Pipeline.scala 49:30]
    reg reg_rs2 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Ex_Pipeline.scala 50:30]
    reg_memWrite <= io.memWrite_in @[Ex_Pipeline.scala 52:22]
    reg_memRead <= io.memRead_in @[Ex_Pipeline.scala 53:21]
    reg_memToReg <= io.memToReg_in @[Ex_Pipeline.scala 54:22]
    reg_rd <= io.rd_in @[Ex_Pipeline.scala 55:16]
    reg_strData <= io.strData_in @[Ex_Pipeline.scala 56:21]
    reg_aluOutput <= io.aluOutput_in @[Ex_Pipeline.scala 57:23]
    reg_regWrite <= io.regWrite_in @[Ex_Pipeline.scala 58:22]
    alu_Output <= io.alu_Output_input @[Ex_Pipeline.scala 59:14]
    alu_branch_output <= io.alu_branch_output_input @[Ex_Pipeline.scala 60:21]
    reg_rs1_sel <= io.rs1_sel_in @[Ex_Pipeline.scala 61:21]
    reg_rs2_sel <= io.rs2_sel_in @[Ex_Pipeline.scala 62:21]
    reg_rs1 <= io.rs1_in @[Ex_Pipeline.scala 63:17]
    reg_rs2 <= io.rs2_in @[Ex_Pipeline.scala 64:17]
    io.rs1_sel_Out <= reg_rs1_sel @[Ex_Pipeline.scala 66:24]
    io.rs2_sel_Out <= reg_rs2_sel @[Ex_Pipeline.scala 67:24]
    io.memWrite_out <= reg_memWrite @[Ex_Pipeline.scala 68:25]
    io.memRead_out <= reg_memRead @[Ex_Pipeline.scala 69:24]
    io.memToReg_out <= reg_memToReg @[Ex_Pipeline.scala 70:25]
    io.rd_out <= reg_rd @[Ex_Pipeline.scala 71:19]
    io.strData_out <= reg_strData @[Ex_Pipeline.scala 72:24]
    io.aluOutput_out <= reg_aluOutput @[Ex_Pipeline.scala 73:26]
    io.regWrite_out <= reg_regWrite @[Ex_Pipeline.scala 74:25]
    io.alu_Output_output <= alu_Output @[Ex_Pipeline.scala 75:24]
    io.alu_branch_output_output <= alu_branch_output @[Ex_Pipeline.scala 76:31]
    io.rs2_out <= reg_rs2 @[Ex_Pipeline.scala 77:20]
    io.rs1_out <= reg_rs1 @[Ex_Pipeline.scala 78:20]
    
  module MEM_Piepline : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_sel_in : UInt<5>, flip rs2_sel_in : UInt<5>, flip memToReg_in : UInt<1>, flip rd_in : UInt<5>, flip dataOut_in : SInt<32>, flip aluOutput_in : SInt<32>, flip regWrite_in : UInt<1>, rs1_sel_Out : UInt<5>, rs2_sel_Out : UInt<5>, memToReg_out : UInt<1>, rd_out : UInt<5>, dataOut_out : SInt<32>, aluOutput_out : SInt<32>, regWrite_out : UInt<1>}
    
    reg reg_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_Piepline.scala 27:35]
    reg reg_rd : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_Piepline.scala 28:29]
    reg reg_dataOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_Piepline.scala 29:34]
    reg reg_aluOutput : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_Piepline.scala 30:36]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_Piepline.scala 31:35]
    reg reg_rs1_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_Piepline.scala 32:34]
    reg reg_rs2_sel : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_Piepline.scala 33:34]
    reg_memToReg <= io.memToReg_in @[MEM_Piepline.scala 36:22]
    reg_rd <= io.rd_in @[MEM_Piepline.scala 37:16]
    reg_dataOut <= io.dataOut_in @[MEM_Piepline.scala 38:21]
    reg_aluOutput <= io.aluOutput_in @[MEM_Piepline.scala 39:23]
    reg_regWrite <= io.regWrite_in @[MEM_Piepline.scala 40:22]
    reg_rs1_sel <= io.rs1_sel_in @[MEM_Piepline.scala 41:21]
    reg_rs2_sel <= io.rs2_sel_in @[MEM_Piepline.scala 42:21]
    io.rs1_sel_Out <= reg_rs1_sel @[MEM_Piepline.scala 45:24]
    io.rs2_sel_Out <= reg_rs2_sel @[MEM_Piepline.scala 46:24]
    io.memToReg_out <= reg_memToReg @[MEM_Piepline.scala 47:25]
    io.rd_out <= reg_rd @[MEM_Piepline.scala 48:19]
    io.dataOut_out <= reg_dataOut @[MEM_Piepline.scala 49:24]
    io.aluOutput_out <= reg_aluOutput @[MEM_Piepline.scala 50:26]
    io.regWrite_out <= reg_regWrite @[MEM_Piepline.scala 51:25]
    
  module Forwarding : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip exe_pipe_regWrite_out : UInt<1>, flip exe_pipe_rd_out : UInt<5>, flip mem_pipe_regWrite_out : UInt<1>, flip mem_pipe_rd_out : UInt<5>, flip id_pipe_rs1_sel_out : UInt<5>, flip id_pipe_rs2_sel_out : UInt<5>, alu_A : UInt<2>, alu_B : UInt<2>}
    
    io.alu_A <= UInt<1>("h00") @[Forwarding.scala 15:12]
    io.alu_B <= UInt<1>("h00") @[Forwarding.scala 16:12]
    node _T_24 = eq(io.exe_pipe_regWrite_out, UInt<1>("h01")) @[Forwarding.scala 18:33]
    node _T_26 = neq(io.exe_pipe_rd_out, UInt<1>("h00")) @[Forwarding.scala 18:66]
    node _T_27 = and(_T_24, _T_26) @[Forwarding.scala 18:44]
    when _T_27 : @[Forwarding.scala 19:3]
      node _T_28 = eq(io.exe_pipe_rd_out, io.id_pipe_rs1_sel_out) @[Forwarding.scala 24:29]
      when _T_28 : @[Forwarding.scala 24:56]
        io.alu_A <= UInt<1>("h01") @[Forwarding.scala 25:16]
        skip @[Forwarding.scala 24:56]
      node _T_30 = eq(io.exe_pipe_rd_out, io.id_pipe_rs2_sel_out) @[Forwarding.scala 27:29]
      when _T_30 : @[Forwarding.scala 27:56]
        io.alu_B <= UInt<1>("h01") @[Forwarding.scala 28:16]
        skip @[Forwarding.scala 27:56]
      skip @[Forwarding.scala 19:3]
    node _T_33 = eq(io.mem_pipe_regWrite_out, UInt<1>("h01")) @[Forwarding.scala 31:33]
    node _T_35 = neq(io.mem_pipe_rd_out, UInt<1>("h00")) @[Forwarding.scala 31:66]
    node _T_36 = and(_T_33, _T_35) @[Forwarding.scala 31:44]
    when _T_36 : @[Forwarding.scala 31:81]
      node _T_38 = eq(io.mem_pipe_regWrite_out, UInt<1>("h01")) @[Forwarding.scala 36:38]
      node _T_40 = neq(io.mem_pipe_rd_out, UInt<1>("h00")) @[Forwarding.scala 36:73]
      node _T_41 = and(_T_38, _T_40) @[Forwarding.scala 36:50]
      node _T_42 = eq(io.exe_pipe_rd_out, io.id_pipe_rs1_sel_out) @[Forwarding.scala 36:112]
      node _T_43 = and(_T_41, _T_42) @[Forwarding.scala 36:89]
      node _T_44 = not(_T_43) @[Forwarding.scala 36:10]
      node _T_45 = eq(io.mem_pipe_rd_out, io.id_pipe_rs1_sel_out) @[Forwarding.scala 36:164]
      node _T_46 = and(_T_44, _T_45) @[Forwarding.scala 36:141]
      when _T_46 : @[Forwarding.scala 36:192]
        io.alu_A <= UInt<2>("h02") @[Forwarding.scala 37:16]
        skip @[Forwarding.scala 36:192]
      node _T_49 = eq(io.mem_pipe_regWrite_out, UInt<1>("h01")) @[Forwarding.scala 39:38]
      node _T_51 = neq(io.mem_pipe_rd_out, UInt<1>("h00")) @[Forwarding.scala 39:73]
      node _T_52 = and(_T_49, _T_51) @[Forwarding.scala 39:50]
      node _T_53 = eq(io.exe_pipe_rd_out, io.id_pipe_rs2_sel_out) @[Forwarding.scala 39:112]
      node _T_54 = and(_T_52, _T_53) @[Forwarding.scala 39:89]
      node _T_55 = not(_T_54) @[Forwarding.scala 39:10]
      node _T_56 = eq(io.mem_pipe_rd_out, io.id_pipe_rs2_sel_out) @[Forwarding.scala 39:164]
      node _T_57 = and(_T_55, _T_56) @[Forwarding.scala 39:141]
      when _T_57 : @[Forwarding.scala 39:192]
        io.alu_B <= UInt<2>("h02") @[Forwarding.scala 40:16]
        skip @[Forwarding.scala 39:192]
      skip @[Forwarding.scala 31:81]
    
  module Core : 
    input clock : Clock
    input reset : UInt<1>
    output io : {instruction : UInt<32>, AluOut : SInt<32>, branchCheck : UInt<1>}
    
    inst control of Control @[Core.scala 11:23]
    control.clock <= clock
    control.reset <= reset
    inst imm of immGen @[Core.scala 12:19]
    imm.clock <= clock
    imm.reset <= reset
    inst aluCtrl of AluControl @[Core.scala 13:23]
    aluCtrl.clock <= clock
    aluCtrl.reset <= reset
    inst alu of Alu @[Core.scala 14:19]
    alu.clock <= clock
    alu.reset <= reset
    inst reg of registerFile @[Core.scala 15:19]
    reg.clock <= clock
    reg.reset <= reset
    inst InsMem of InsMem @[Core.scala 16:22]
    InsMem.clock <= clock
    InsMem.reset <= reset
    inst PC of PC @[Core.scala 17:18]
    PC.clock <= clock
    PC.reset <= reset
    inst jalr of JalrTarget @[Core.scala 18:20]
    jalr.clock <= clock
    jalr.reset <= reset
    inst dataMem of DataMem @[Core.scala 19:23]
    dataMem.clock <= clock
    dataMem.reset <= reset
    inst if_pipe of IF_Pipeline @[Core.scala 20:23]
    if_pipe.clock <= clock
    if_pipe.reset <= reset
    inst id_pipe of ID_Pipeline @[Core.scala 21:23]
    id_pipe.clock <= clock
    id_pipe.reset <= reset
    inst exe_pipe of Ex_Pipeline @[Core.scala 22:24]
    exe_pipe.clock <= clock
    exe_pipe.reset <= reset
    inst mem_pipe of MEM_Piepline @[Core.scala 23:24]
    mem_pipe.clock <= clock
    mem_pipe.reset <= reset
    inst forwarding of Forwarding @[Core.scala 24:26]
    forwarding.clock <= clock
    forwarding.reset <= reset
    node _T_12 = eq(control.io.extendSel, UInt<1>("h00")) @[Core.scala 27:29]
    when _T_12 : @[Core.scala 27:37]
      jalr.io.imm <= imm.io.i @[Core.scala 28:17]
      skip @[Core.scala 27:37]
    else : @[Core.scala 29:43]
      node _T_14 = eq(control.io.extendSel, UInt<2>("h02")) @[Core.scala 29:35]
      when _T_14 : @[Core.scala 29:43]
        jalr.io.imm <= imm.io.S @[Core.scala 30:17]
        skip @[Core.scala 29:43]
      else : @[Core.scala 31:43]
        node _T_16 = eq(control.io.extendSel, UInt<1>("h01")) @[Core.scala 31:35]
        when _T_16 : @[Core.scala 31:43]
          jalr.io.imm <= imm.io.u @[Core.scala 32:17]
          skip @[Core.scala 31:43]
        else : @[Core.scala 33:14]
          jalr.io.imm is invalid @[Core.scala 34:17]
          skip @[Core.scala 33:14]
    jalr.io.rs1 <= reg.io.rs1 @[Core.scala 36:15]
    PC.io.input <= PC.io.pc4 @[Core.scala 39:15]
    node _T_17 = bits(PC.io.pc, 11, 2) @[Core.scala 43:31]
    InsMem.io.wrAddr <= _T_17 @[Core.scala 43:20]
    io.instruction <= InsMem.io.rdData @[Core.scala 44:18]
    if_pipe.io.pc_in <= PC.io.pc @[Core.scala 47:20]
    if_pipe.io.pc4_in <= PC.io.pc4 @[Core.scala 48:21]
    if_pipe.io.ins_in <= io.instruction @[Core.scala 49:21]
    node _T_18 = bits(if_pipe.io.ins_out, 6, 0) @[Core.scala 53:42]
    control.io.opcode <= _T_18 @[Core.scala 53:21]
    imm.io.ins <= if_pipe.io.ins_out @[Core.scala 56:14]
    imm.io.pc <= if_pipe.io.pc_out @[Core.scala 57:13]
    node _T_19 = bits(if_pipe.io.ins_out, 19, 15) @[Core.scala 60:39]
    reg.io.rs1_sel <= _T_19 @[Core.scala 60:18]
    node _T_20 = bits(if_pipe.io.ins_out, 24, 20) @[Core.scala 61:39]
    reg.io.rs2_sel <= _T_20 @[Core.scala 61:18]
    aluCtrl.io.ALUop <= control.io.aluOp @[Core.scala 66:20]
    node _T_21 = bits(if_pipe.io.ins_out, 14, 12) @[Core.scala 67:41]
    aluCtrl.io.func3 <= _T_21 @[Core.scala 67:20]
    node _T_22 = bits(if_pipe.io.ins_out, 30, 30) @[Core.scala 68:41]
    aluCtrl.io.func7 <= _T_22 @[Core.scala 68:20]
    node _T_24 = eq(control.io.oprA, UInt<1>("h00")) @[Core.scala 71:24]
    node _T_26 = eq(control.io.oprA, UInt<2>("h03")) @[Core.scala 71:51]
    node _T_27 = or(_T_24, _T_26) @[Core.scala 71:32]
    when _T_27 : @[Core.scala 71:59]
      id_pipe.io.operandA_in <= reg.io.rs1 @[Core.scala 72:28]
      skip @[Core.scala 71:59]
    else : @[Core.scala 73:38]
      node _T_29 = eq(control.io.oprA, UInt<2>("h02")) @[Core.scala 73:30]
      when _T_29 : @[Core.scala 73:38]
        node _T_30 = asSInt(if_pipe.io.pc4_out) @[Core.scala 74:50]
        id_pipe.io.operandA_in <= _T_30 @[Core.scala 74:28]
        skip @[Core.scala 73:38]
      else : @[Core.scala 75:38]
        node _T_32 = eq(control.io.oprA, UInt<1>("h01")) @[Core.scala 75:30]
        when _T_32 : @[Core.scala 75:38]
          node _T_33 = asSInt(if_pipe.io.pc_out) @[Core.scala 76:49]
          id_pipe.io.operandA_in <= _T_33 @[Core.scala 76:28]
          skip @[Core.scala 75:38]
        else : @[Core.scala 77:14]
          id_pipe.io.operandA_in is invalid @[Core.scala 78:28]
          skip @[Core.scala 77:14]
    node _T_35 = eq(control.io.oprB, UInt<1>("h00")) @[Core.scala 81:24]
    when _T_35 : @[Core.scala 81:32]
      id_pipe.io.operandB_in <= reg.io.rs2 @[Core.scala 82:28]
      skip @[Core.scala 81:32]
    else : @[Core.scala 83:14]
      node _T_37 = eq(control.io.extendSel, UInt<1>("h00")) @[Core.scala 84:31]
      when _T_37 : @[Core.scala 84:39]
        id_pipe.io.operandB_in <= imm.io.i @[Core.scala 85:30]
        skip @[Core.scala 84:39]
      else : @[Core.scala 86:45]
        node _T_39 = eq(control.io.extendSel, UInt<1>("h01")) @[Core.scala 86:37]
        when _T_39 : @[Core.scala 86:45]
          id_pipe.io.operandB_in <= imm.io.S @[Core.scala 87:30]
          skip @[Core.scala 86:45]
        else : @[Core.scala 88:45]
          node _T_41 = eq(control.io.extendSel, UInt<2>("h02")) @[Core.scala 88:37]
          when _T_41 : @[Core.scala 88:45]
            id_pipe.io.operandB_in <= imm.io.u @[Core.scala 89:30]
            skip @[Core.scala 88:45]
          else : @[Core.scala 90:16]
            id_pipe.io.operandB_in <= reg.io.rs2 @[Core.scala 91:30]
            skip @[Core.scala 90:16]
      skip @[Core.scala 83:14]
    id_pipe.io.opr_A_sel_in <= control.io.oprA @[Core.scala 99:27]
    id_pipe.io.opr_B_sel_in <= control.io.oprB @[Core.scala 100:27]
    node _T_42 = bits(if_pipe.io.ins_out, 19, 15) @[Core.scala 101:46]
    id_pipe.io.rs1_sel_in <= _T_42 @[Core.scala 101:25]
    node _T_43 = bits(if_pipe.io.ins_out, 24, 20) @[Core.scala 102:46]
    id_pipe.io.rs2_sel_in <= _T_43 @[Core.scala 102:25]
    id_pipe.io.memWrite_in <= control.io.memWrite @[Core.scala 103:26]
    id_pipe.io.memRead_in <= control.io.memRead @[Core.scala 104:25]
    id_pipe.io.memToReg_in <= control.io.memToReg @[Core.scala 105:26]
    node _T_44 = bits(if_pipe.io.ins_out, 11, 7) @[Core.scala 106:41]
    id_pipe.io.rd_in <= _T_44 @[Core.scala 106:20]
    id_pipe.io.strData_in <= reg.io.rs2 @[Core.scala 107:25]
    id_pipe.io.aluCtrl_in <= aluCtrl.io.out @[Core.scala 108:25]
    id_pipe.io.regWrite_in <= control.io.regWrite @[Core.scala 109:26]
    alu.io.aluControl <= id_pipe.io.aluCtrl_out @[Core.scala 113:21]
    alu.io.a <= id_pipe.io.operandA_out @[Core.scala 114:12]
    alu.io.b <= id_pipe.io.operandB_out @[Core.scala 115:12]
    exe_pipe.io.alu_Output_input <= alu.io.aluOut @[Core.scala 116:32]
    exe_pipe.io.alu_branch_output_input <= alu.io.branch @[Core.scala 117:39]
    io.AluOut <= exe_pipe.io.alu_Output_output @[Core.scala 118:13]
    io.branchCheck <= exe_pipe.io.alu_branch_output_output @[Core.scala 119:18]
    exe_pipe.io.rs2_in <= id_pipe.io.operandB_out @[Core.scala 122:22]
    exe_pipe.io.rs1_in <= id_pipe.io.operandA_out @[Core.scala 123:22]
    exe_pipe.io.rs1_sel_in <= id_pipe.io.rs1_sel_Out @[Core.scala 124:26]
    exe_pipe.io.rs2_sel_in <= id_pipe.io.rs2_sel_Out @[Core.scala 125:26]
    exe_pipe.io.memWrite_in <= id_pipe.io.memWrite_out @[Core.scala 126:27]
    exe_pipe.io.memRead_in <= id_pipe.io.memRead_out @[Core.scala 127:26]
    exe_pipe.io.memToReg_in <= id_pipe.io.memToReg_out @[Core.scala 128:27]
    exe_pipe.io.rd_in <= id_pipe.io.rd_out @[Core.scala 129:21]
    exe_pipe.io.strData_in <= id_pipe.io.strData_out @[Core.scala 130:26]
    exe_pipe.io.aluOutput_in <= alu.io.aluOut @[Core.scala 131:28]
    exe_pipe.io.regWrite_in <= id_pipe.io.regWrite_out @[Core.scala 132:27]
    dataMem.io.store <= exe_pipe.io.memWrite_out @[Core.scala 138:20]
    dataMem.io.load <= exe_pipe.io.memRead_out @[Core.scala 139:19]
    node _T_45 = bits(exe_pipe.io.aluOutput_out, 9, 2) @[Core.scala 140:48]
    dataMem.io.addrr <= _T_45 @[Core.scala 140:20]
    dataMem.io.storedata <= exe_pipe.io.strData_out @[Core.scala 141:24]
    mem_pipe.io.rs1_sel_in <= exe_pipe.io.rs2_sel_Out @[Core.scala 152:26]
    mem_pipe.io.rs2_sel_in <= exe_pipe.io.rs2_sel_Out @[Core.scala 153:26]
    mem_pipe.io.memToReg_in <= exe_pipe.io.memToReg_out @[Core.scala 154:27]
    mem_pipe.io.rd_in <= exe_pipe.io.rd_out @[Core.scala 155:21]
    mem_pipe.io.aluOutput_in <= exe_pipe.io.aluOutput_out @[Core.scala 156:28]
    mem_pipe.io.dataOut_in <= dataMem.io.dataOut @[Core.scala 157:26]
    mem_pipe.io.regWrite_in <= exe_pipe.io.regWrite_out @[Core.scala 158:27]
    reg.io.rd_sel <= mem_pipe.io.rd_out @[Core.scala 167:17]
    reg.io.regWrite <= mem_pipe.io.regWrite_out @[Core.scala 168:19]
    reg.io.rd_sel <= mem_pipe.io.rd_out @[Core.scala 170:17]
    reg.io.regWrite <= mem_pipe.io.regWrite_out @[Core.scala 171:19]
    node _T_47 = eq(mem_pipe.io.memToReg_out, UInt<1>("h01")) @[Core.scala 173:33]
    when _T_47 : @[Core.scala 173:41]
      reg.io.writeData <= mem_pipe.io.dataOut_out @[Core.scala 174:22]
      skip @[Core.scala 173:41]
    else : @[Core.scala 175:14]
      node _T_49 = eq(reg.io.regWrite, UInt<1>("h01")) @[Core.scala 176:26]
      when _T_49 : @[Core.scala 176:34]
        reg.io.writeData <= mem_pipe.io.aluOutput_out @[Core.scala 177:24]
        skip @[Core.scala 176:34]
      else : @[Core.scala 178:16]
        reg.io.writeData <= asSInt(UInt<1>("h00")) @[Core.scala 179:24]
        skip @[Core.scala 178:16]
      skip @[Core.scala 175:14]
    forwarding.io.exe_pipe_regWrite_out <= exe_pipe.io.regWrite_out @[Core.scala 198:39]
    forwarding.io.exe_pipe_rd_out <= exe_pipe.io.rd_out @[Core.scala 199:33]
    forwarding.io.mem_pipe_regWrite_out <= mem_pipe.io.regWrite_out @[Core.scala 200:39]
    forwarding.io.mem_pipe_rd_out <= mem_pipe.io.rd_out @[Core.scala 201:33]
    forwarding.io.id_pipe_rs1_sel_out <= id_pipe.io.rs1_sel_Out @[Core.scala 202:37]
    forwarding.io.id_pipe_rs2_sel_out <= id_pipe.io.rs2_sel_Out @[Core.scala 203:37]
    node _T_52 = eq(id_pipe.io.opr_A_sel_Out, UInt<2>("h02")) @[Core.scala 206:33]
    when _T_52 : @[Core.scala 206:45]
      alu.io.a <= id_pipe.io.operandA_out @[Core.scala 207:14]
      skip @[Core.scala 206:45]
    else : @[Core.scala 208:14]
      node _T_54 = eq(forwarding.io.alu_A, UInt<1>("h00")) @[Core.scala 209:30]
      when _T_54 : @[Core.scala 209:42]
        alu.io.a <= id_pipe.io.operandA_out @[Core.scala 210:16]
        skip @[Core.scala 209:42]
      else : @[Core.scala 211:48]
        node _T_56 = eq(forwarding.io.alu_A, UInt<1>("h01")) @[Core.scala 211:36]
        when _T_56 : @[Core.scala 211:48]
          alu.io.a <= exe_pipe.io.alu_Output_output @[Core.scala 212:16]
          skip @[Core.scala 211:48]
        else : @[Core.scala 213:48]
          node _T_58 = eq(forwarding.io.alu_A, UInt<2>("h02")) @[Core.scala 213:36]
          when _T_58 : @[Core.scala 213:48]
            alu.io.a <= reg.io.writeData @[Core.scala 214:16]
            skip @[Core.scala 213:48]
          else : @[Core.scala 215:16]
            alu.io.a <= id_pipe.io.operandA_out @[Core.scala 216:16]
            skip @[Core.scala 215:16]
      skip @[Core.scala 208:14]
    node _T_60 = eq(id_pipe.io.opr_B_sel_Out, UInt<1>("h01")) @[Core.scala 220:33]
    when _T_60 : @[Core.scala 220:44]
      alu.io.b <= id_pipe.io.operandB_out @[Core.scala 221:14]
      node _T_62 = eq(forwarding.io.alu_B, UInt<1>("h00")) @[Core.scala 222:30]
      when _T_62 : @[Core.scala 222:43]
        exe_pipe.io.rs2_in <= id_pipe.io.operandB_out @[Core.scala 223:26]
        skip @[Core.scala 222:43]
      else : @[Core.scala 224:49]
        node _T_64 = eq(forwarding.io.alu_B, UInt<1>("h01")) @[Core.scala 224:36]
        when _T_64 : @[Core.scala 224:49]
          exe_pipe.io.rs2_in <= exe_pipe.io.alu_Output_output @[Core.scala 225:26]
          skip @[Core.scala 224:49]
        else : @[Core.scala 226:49]
          node _T_66 = eq(forwarding.io.alu_B, UInt<2>("h02")) @[Core.scala 226:36]
          when _T_66 : @[Core.scala 226:49]
            exe_pipe.io.rs2_in <= reg.io.writeData @[Core.scala 227:26]
            skip @[Core.scala 226:49]
          else : @[Core.scala 228:17]
            exe_pipe.io.rs2_in <= id_pipe.io.operandB_out @[Core.scala 229:26]
            skip @[Core.scala 228:17]
      skip @[Core.scala 220:44]
    else : @[Core.scala 231:14]
      node _T_68 = eq(forwarding.io.alu_B, UInt<1>("h00")) @[Core.scala 232:30]
      when _T_68 : @[Core.scala 232:43]
        alu.io.b <= id_pipe.io.operandB_out @[Core.scala 233:16]
        exe_pipe.io.rs2_in <= id_pipe.io.operandB_out @[Core.scala 234:26]
        skip @[Core.scala 232:43]
      else : @[Core.scala 235:49]
        node _T_70 = eq(forwarding.io.alu_B, UInt<1>("h01")) @[Core.scala 235:36]
        when _T_70 : @[Core.scala 235:49]
          alu.io.b <= exe_pipe.io.alu_Output_output @[Core.scala 236:16]
          exe_pipe.io.rs2_in <= exe_pipe.io.alu_Output_output @[Core.scala 237:26]
          skip @[Core.scala 235:49]
        else : @[Core.scala 238:49]
          node _T_72 = eq(forwarding.io.alu_B, UInt<2>("h02")) @[Core.scala 238:36]
          when _T_72 : @[Core.scala 238:49]
            alu.io.b <= reg.io.writeData @[Core.scala 239:16]
            exe_pipe.io.rs2_in <= reg.io.writeData @[Core.scala 240:26]
            skip @[Core.scala 238:49]
          else : @[Core.scala 241:17]
            alu.io.b <= id_pipe.io.operandB_out @[Core.scala 242:16]
            exe_pipe.io.rs2_in <= id_pipe.io.operandB_out @[Core.scala 243:26]
            skip @[Core.scala 241:17]
      skip @[Core.scala 231:14]
    

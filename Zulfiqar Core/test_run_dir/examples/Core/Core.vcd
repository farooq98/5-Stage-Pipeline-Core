$version Generated by VerilatedVcd $end
$date Sun Feb 16 16:52:57 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 "5 clock $end
  $var wire 32 "8 io_AluOut [31:0] $end
  $var wire  1 "9 io_branchCheck $end
  $var wire 32 "7 io_instruction [31:0] $end
  $var wire  1 "6 reset $end
  $scope module Core $end
   $var wire  1 "5 InsMem_clock $end
   $var wire 32 1 InsMem_io_rdData [31:0] $end
   $var wire 32 J InsMem_io_wrAddr [31:0] $end
   $var wire  1 "5 PC_clock $end
   $var wire 32 K PC_io_input [31:0] $end
   $var wire 32 L PC_io_pc [31:0] $end
   $var wire 32 K PC_io_pc4 [31:0] $end
   $var wire  1 "6 PC_reset $end
   $var wire  3 & aluCtrl_io_ALUop [2:0] $end
   $var wire  3 B aluCtrl_io_func3 [2:0] $end
   $var wire  1 C aluCtrl_io_func7 $end
   $var wire  5 * aluCtrl_io_out [4:0] $end
   $var wire 32 + alu_io_a [31:0] $end
   $var wire  5 D alu_io_aluControl [4:0] $end
   $var wire 32 . alu_io_aluOut [31:0] $end
   $var wire 32 , alu_io_b [31:0] $end
   $var wire  1 - alu_io_branch $end
   $var wire  1 "5 clock $end
   $var wire  3 & control_io_aluOp [2:0] $end
   $var wire  2 ) control_io_extendSel [1:0] $end
   $var wire  1 $ control_io_memRead $end
   $var wire  1 $ control_io_memToReg $end
   $var wire  1 # control_io_memWrite $end
   $var wire  7 = control_io_opcode [6:0] $end
   $var wire  2 ' control_io_oprA [1:0] $end
   $var wire  1 ( control_io_oprB $end
   $var wire  1 % control_io_regWrite $end
   $var wire  1 "5 dataMem_clock $end
   $var wire  8 O dataMem_io_addrr [7:0] $end
   $var wire 32 Q dataMem_io_dataOut [31:0] $end
   $var wire  1 M dataMem_io_load $end
   $var wire  1 N dataMem_io_store $end
   $var wire 32 P dataMem_io_storedata [31:0] $end
   $var wire  1 "5 exe_pipe_clock $end
   $var wire 32 . exe_pipe_io_aluOutput_in [31:0] $end
   $var wire 32 c exe_pipe_io_aluOutput_out [31:0] $end
   $var wire 32 . exe_pipe_io_alu_Output_input [31:0] $end
   $var wire 32 c exe_pipe_io_alu_Output_output [31:0] $end
   $var wire  1 - exe_pipe_io_alu_branch_output_input $end
   $var wire  1 e exe_pipe_io_alu_branch_output_output $end
   $var wire  1 X exe_pipe_io_memRead_in $end
   $var wire  1 M exe_pipe_io_memRead_out $end
   $var wire  1 Y exe_pipe_io_memToReg_in $end
   $var wire  1 a exe_pipe_io_memToReg_out $end
   $var wire  1 W exe_pipe_io_memWrite_in $end
   $var wire  1 N exe_pipe_io_memWrite_out $end
   $var wire  5 \ exe_pipe_io_rd_in [4:0] $end
   $var wire  5 b exe_pipe_io_rd_out [4:0] $end
   $var wire  1 ^ exe_pipe_io_regWrite_in $end
   $var wire  1 d exe_pipe_io_regWrite_out $end
   $var wire 32 ] exe_pipe_io_strData_in [31:0] $end
   $var wire 32 P exe_pipe_io_strData_out [31:0] $end
   $var wire  1 "6 exe_pipe_reset $end
   $var wire  2 4 forwarding_io_alu_A [1:0] $end
   $var wire  2 5 forwarding_io_alu_B [1:0] $end
   $var wire  5 b forwarding_io_exe_pipe_rd_out [4:0] $end
   $var wire  1 d forwarding_io_exe_pipe_regWrite_out $end
   $var wire  5 U forwarding_io_id_pipe_rs1_sel_out [4:0] $end
   $var wire  5 V forwarding_io_id_pipe_rs2_sel_out [4:0] $end
   $var wire  5 H forwarding_io_mem_pipe_rd_out [4:0] $end
   $var wire  1 E forwarding_io_mem_pipe_regWrite_out $end
   $var wire  1 "5 id_pipe_clock $end
   $var wire  5 * id_pipe_io_aluCtrl_in [4:0] $end
   $var wire  5 D id_pipe_io_aluCtrl_out [4:0] $end
   $var wire  1 $ id_pipe_io_memRead_in $end
   $var wire  1 X id_pipe_io_memRead_out $end
   $var wire  1 $ id_pipe_io_memToReg_in $end
   $var wire  1 Y id_pipe_io_memToReg_out $end
   $var wire  1 # id_pipe_io_memWrite_in $end
   $var wire  1 W id_pipe_io_memWrite_out $end
   $var wire 32 2 id_pipe_io_operandA_in [31:0] $end
   $var wire 32 Z id_pipe_io_operandA_out [31:0] $end
   $var wire 32 3 id_pipe_io_operandB_in [31:0] $end
   $var wire 32 [ id_pipe_io_operandB_out [31:0] $end
   $var wire  2 _ id_pipe_io_opr_A_sel_Out [1:0] $end
   $var wire  2 ' id_pipe_io_opr_A_sel_in [1:0] $end
   $var wire  1 ` id_pipe_io_opr_B_sel_Out $end
   $var wire  1 ( id_pipe_io_opr_B_sel_in $end
   $var wire  5 T id_pipe_io_rd_in [4:0] $end
   $var wire  5 \ id_pipe_io_rd_out [4:0] $end
   $var wire  1 % id_pipe_io_regWrite_in $end
   $var wire  1 ^ id_pipe_io_regWrite_out $end
   $var wire  5 U id_pipe_io_rs1_sel_Out [4:0] $end
   $var wire  5 F id_pipe_io_rs1_sel_in [4:0] $end
   $var wire  5 V id_pipe_io_rs2_sel_Out [4:0] $end
   $var wire  5 G id_pipe_io_rs2_sel_in [4:0] $end
   $var wire 32 0 id_pipe_io_strData_in [31:0] $end
   $var wire 32 ] id_pipe_io_strData_out [31:0] $end
   $var wire  1 "6 id_pipe_reset $end
   $var wire  1 "5 if_pipe_clock $end
   $var wire 32 "7 if_pipe_io_ins_in [31:0] $end
   $var wire 32 > if_pipe_io_ins_out [31:0] $end
   $var wire 32 K if_pipe_io_pc4_in [31:0] $end
   $var wire 32 S if_pipe_io_pc4_out [31:0] $end
   $var wire 32 L if_pipe_io_pc_in [31:0] $end
   $var wire 32 R if_pipe_io_pc_out [31:0] $end
   $var wire  1 "6 if_pipe_reset $end
   $var wire 32 ? imm_io_S [31:0] $end
   $var wire 32 @ imm_io_i [31:0] $end
   $var wire 32 > imm_io_ins [31:0] $end
   $var wire 32 A imm_io_u [31:0] $end
   $var wire 32 "8 io_AluOut [31:0] $end
   $var wire  1 "9 io_branchCheck $end
   $var wire 32 "7 io_instruction [31:0] $end
   $var wire  1 "5 mem_pipe_clock $end
   $var wire 32 c mem_pipe_io_aluOutput_in [31:0] $end
   $var wire 32 h mem_pipe_io_aluOutput_out [31:0] $end
   $var wire 32 Q mem_pipe_io_dataOut_in [31:0] $end
   $var wire 32 g mem_pipe_io_dataOut_out [31:0] $end
   $var wire  1 a mem_pipe_io_memToReg_in $end
   $var wire  1 f mem_pipe_io_memToReg_out $end
   $var wire  5 b mem_pipe_io_rd_in [4:0] $end
   $var wire  5 H mem_pipe_io_rd_out [4:0] $end
   $var wire  1 d mem_pipe_io_regWrite_in $end
   $var wire  1 E mem_pipe_io_regWrite_out $end
   $var wire  1 "6 mem_pipe_reset $end
   $var wire  1 "5 reg$_clock $end
   $var wire  5 H reg$_io_rd_sel [4:0] $end
   $var wire  1 E reg$_io_regWrite $end
   $var wire 32 I reg$_io_rs1 [31:0] $end
   $var wire  5 F reg$_io_rs1_sel [4:0] $end
   $var wire 32 0 reg$_io_rs2 [31:0] $end
   $var wire  5 G reg$_io_rs2_sel [4:0] $end
   $var wire 32 / reg$_io_writeData [31:0] $end
   $var wire  1 "6 reset $end
   $scope module InsMem $end
    $var wire  1 "5 clock $end
    $var wire 32 1 io_rdData [31:0] $end
    $var wire 32 J io_wrAddr [31:0] $end
    $var wire 10 "3 mem__T_12_addr [9:0] $end
    $var wire 32 1 mem__T_12_data [31:0] $end
    $scope module BindsTo_0_InsMem_Inst $end
     $var wire  1 "5 clock $end
     $var wire 32 1 io_rdData [31:0] $end
     $var wire 32 J io_wrAddr [31:0] $end
    $upscope $end
   $upscope $end
   $scope module PC $end
    $var wire  1 "5 clock $end
    $var wire 32 K io_input [31:0] $end
    $var wire 32 L io_pc [31:0] $end
    $var wire 32 K io_pc4 [31:0] $end
    $var wire 32 L reg$ [31:0] $end
    $var wire  1 "6 reset $end
   $upscope $end
   $scope module alu $end
    $var wire 32 + io_a [31:0] $end
    $var wire  5 D io_aluControl [4:0] $end
    $var wire 32 . io_aluOut [31:0] $end
    $var wire 32 , io_b [31:0] $end
    $var wire  1 - io_branch $end
   $upscope $end
   $scope module aluCtrl $end
    $var wire  3 & io_ALUop [2:0] $end
    $var wire  3 B io_func3 [2:0] $end
    $var wire  1 C io_func7 $end
    $var wire  5 * io_out [4:0] $end
   $upscope $end
   $scope module control $end
    $var wire  3 & CtrlDecode_io_aluOp [2:0] $end
    $var wire  1 8 CtrlDecode_io_br $end
    $var wire  2 ) CtrlDecode_io_extendSel [1:0] $end
    $var wire  1 9 CtrlDecode_io_i $end
    $var wire  1 : CtrlDecode_io_jal $end
    $var wire  1 ; CtrlDecode_io_jalr $end
    $var wire  1 6 CtrlDecode_io_load $end
    $var wire  1 < CtrlDecode_io_lui $end
    $var wire  1 $ CtrlDecode_io_memRead $end
    $var wire  1 $ CtrlDecode_io_memToReg $end
    $var wire  1 # CtrlDecode_io_memWrite $end
    $var wire  2 ' CtrlDecode_io_oprA [1:0] $end
    $var wire  1 ( CtrlDecode_io_oprB $end
    $var wire  1 i CtrlDecode_io_r $end
    $var wire  1 % CtrlDecode_io_regWrite $end
    $var wire  1 7 CtrlDecode_io_store $end
    $var wire  3 & io_aluOp [2:0] $end
    $var wire  2 ) io_extendSel [1:0] $end
    $var wire  1 $ io_memRead $end
    $var wire  1 $ io_memToReg $end
    $var wire  1 # io_memWrite $end
    $var wire  7 = io_opcode [6:0] $end
    $var wire  2 ' io_oprA [1:0] $end
    $var wire  1 ( io_oprB $end
    $var wire  1 % io_regWrite $end
    $var wire  1 8 typeDecode_io_branch $end
    $var wire  1 9 typeDecode_io_i $end
    $var wire  1 : typeDecode_io_jal $end
    $var wire  1 ; typeDecode_io_jalr $end
    $var wire  1 6 typeDecode_io_load $end
    $var wire  1 < typeDecode_io_lui $end
    $var wire  7 = typeDecode_io_opcode [6:0] $end
    $var wire  1 i typeDecode_io_r $end
    $var wire  1 7 typeDecode_io_store $end
    $scope module CtrlDecode $end
     $var wire  3 & io_aluOp [2:0] $end
     $var wire  1 8 io_br $end
     $var wire  2 ) io_extendSel [1:0] $end
     $var wire  1 9 io_i $end
     $var wire  1 : io_jal $end
     $var wire  1 ; io_jalr $end
     $var wire  1 6 io_load $end
     $var wire  1 < io_lui $end
     $var wire  1 $ io_memRead $end
     $var wire  1 $ io_memToReg $end
     $var wire  1 # io_memWrite $end
     $var wire  2 ' io_oprA [1:0] $end
     $var wire  1 ( io_oprB $end
     $var wire  1 i io_r $end
     $var wire  1 % io_regWrite $end
     $var wire  1 7 io_store $end
    $upscope $end
    $scope module typeDecode $end
     $var wire  1 8 io_branch $end
     $var wire  1 9 io_i $end
     $var wire  1 : io_jal $end
     $var wire  1 ; io_jalr $end
     $var wire  1 6 io_load $end
     $var wire  1 < io_lui $end
     $var wire  7 = io_opcode [6:0] $end
     $var wire  1 i io_r $end
     $var wire  1 7 io_store $end
    $upscope $end
   $upscope $end
   $scope module dataMem $end
    $var wire  1 "5 clock $end
    $var wire  8 O io_addrr [7:0] $end
    $var wire 32 Q io_dataOut [31:0] $end
    $var wire  1 M io_load $end
    $var wire  1 N io_store $end
    $var wire 32 P io_storedata [31:0] $end
    $var wire 10 "4 mem__T_19_addr [9:0] $end
    $var wire 32 Q mem__T_19_data [31:0] $end
    $var wire 10 "4 mem__T_22_addr [9:0] $end
    $var wire 32 P mem__T_22_data [31:0] $end
    $var wire  1 N mem__T_22_en $end
    $var wire  1 ": mem__T_22_mask $end
   $upscope $end
   $scope module exe_pipe $end
    $var wire 32 c alu_Output [31:0] $end
    $var wire  1 e alu_branch_output $end
    $var wire  1 "5 clock $end
    $var wire 32 . io_aluOutput_in [31:0] $end
    $var wire 32 c io_aluOutput_out [31:0] $end
    $var wire 32 . io_alu_Output_input [31:0] $end
    $var wire 32 c io_alu_Output_output [31:0] $end
    $var wire  1 - io_alu_branch_output_input $end
    $var wire  1 e io_alu_branch_output_output $end
    $var wire  1 X io_memRead_in $end
    $var wire  1 M io_memRead_out $end
    $var wire  1 Y io_memToReg_in $end
    $var wire  1 a io_memToReg_out $end
    $var wire  1 W io_memWrite_in $end
    $var wire  1 N io_memWrite_out $end
    $var wire  5 \ io_rd_in [4:0] $end
    $var wire  5 b io_rd_out [4:0] $end
    $var wire  1 ^ io_regWrite_in $end
    $var wire  1 d io_regWrite_out $end
    $var wire 32 ] io_strData_in [31:0] $end
    $var wire 32 P io_strData_out [31:0] $end
    $var wire 32 c reg_aluOutput [31:0] $end
    $var wire  1 M reg_memRead $end
    $var wire  1 a reg_memToReg $end
    $var wire  1 N reg_memWrite $end
    $var wire  5 b reg_rd [4:0] $end
    $var wire  1 d reg_regWrite $end
    $var wire 32 P reg_strData [31:0] $end
    $var wire  1 "6 reset $end
   $upscope $end
   $scope module forwarding $end
    $var wire  2 4 io_alu_A [1:0] $end
    $var wire  2 5 io_alu_B [1:0] $end
    $var wire  5 b io_exe_pipe_rd_out [4:0] $end
    $var wire  1 d io_exe_pipe_regWrite_out $end
    $var wire  5 U io_id_pipe_rs1_sel_out [4:0] $end
    $var wire  5 V io_id_pipe_rs2_sel_out [4:0] $end
    $var wire  5 H io_mem_pipe_rd_out [4:0] $end
    $var wire  1 E io_mem_pipe_regWrite_out $end
   $upscope $end
   $scope module id_pipe $end
    $var wire  1 "5 clock $end
    $var wire  5 * io_aluCtrl_in [4:0] $end
    $var wire  5 D io_aluCtrl_out [4:0] $end
    $var wire  1 $ io_memRead_in $end
    $var wire  1 X io_memRead_out $end
    $var wire  1 $ io_memToReg_in $end
    $var wire  1 Y io_memToReg_out $end
    $var wire  1 # io_memWrite_in $end
    $var wire  1 W io_memWrite_out $end
    $var wire 32 2 io_operandA_in [31:0] $end
    $var wire 32 Z io_operandA_out [31:0] $end
    $var wire 32 3 io_operandB_in [31:0] $end
    $var wire 32 [ io_operandB_out [31:0] $end
    $var wire  2 _ io_opr_A_sel_Out [1:0] $end
    $var wire  2 ' io_opr_A_sel_in [1:0] $end
    $var wire  1 ` io_opr_B_sel_Out $end
    $var wire  1 ( io_opr_B_sel_in $end
    $var wire  5 T io_rd_in [4:0] $end
    $var wire  5 \ io_rd_out [4:0] $end
    $var wire  1 % io_regWrite_in $end
    $var wire  1 ^ io_regWrite_out $end
    $var wire  5 U io_rs1_sel_Out [4:0] $end
    $var wire  5 F io_rs1_sel_in [4:0] $end
    $var wire  5 V io_rs2_sel_Out [4:0] $end
    $var wire  5 G io_rs2_sel_in [4:0] $end
    $var wire 32 0 io_strData_in [31:0] $end
    $var wire 32 ] io_strData_out [31:0] $end
    $var wire  5 D reg_aluCtrl [4:0] $end
    $var wire  1 X reg_memRead $end
    $var wire  1 Y reg_memToReg $end
    $var wire  1 W reg_memWrite $end
    $var wire 32 Z reg_operandA [31:0] $end
    $var wire 32 [ reg_operandB [31:0] $end
    $var wire  2 _ reg_opr_A [1:0] $end
    $var wire  1 ` reg_opr_B $end
    $var wire  5 \ reg_rd [4:0] $end
    $var wire  1 ^ reg_regWrite $end
    $var wire  5 U reg_rs1_sel [4:0] $end
    $var wire  5 V reg_rs2_sel [4:0] $end
    $var wire 32 ] reg_strData [31:0] $end
    $var wire  1 "6 reset $end
   $upscope $end
   $scope module if_pipe $end
    $var wire  1 "5 clock $end
    $var wire 32 "7 io_ins_in [31:0] $end
    $var wire 32 > io_ins_out [31:0] $end
    $var wire 32 K io_pc4_in [31:0] $end
    $var wire 32 S io_pc4_out [31:0] $end
    $var wire 32 L io_pc_in [31:0] $end
    $var wire 32 R io_pc_out [31:0] $end
    $var wire 32 > reg_ins [31:0] $end
    $var wire 32 R reg_pc [31:0] $end
    $var wire 32 S reg_pc4 [31:0] $end
    $var wire  1 "6 reset $end
   $upscope $end
   $scope module imm $end
    $var wire  4 o imm11 [3:0] $end
    $var wire  8 n imm19 [7:0] $end
    $var wire  1 m imm20 $end
    $var wire  4 l imm24 [3:0] $end
    $var wire  6 k imm30 [5:0] $end
    $var wire  1 j imm31 $end
    $var wire  1 p imm7 $end
    $var wire 32 ? io_S [31:0] $end
    $var wire 32 @ io_i [31:0] $end
    $var wire 32 > io_ins [31:0] $end
    $var wire 32 A io_u [31:0] $end
   $upscope $end
   $scope module mem_pipe $end
    $var wire  1 "5 clock $end
    $var wire 32 c io_aluOutput_in [31:0] $end
    $var wire 32 h io_aluOutput_out [31:0] $end
    $var wire 32 Q io_dataOut_in [31:0] $end
    $var wire 32 g io_dataOut_out [31:0] $end
    $var wire  1 a io_memToReg_in $end
    $var wire  1 f io_memToReg_out $end
    $var wire  5 b io_rd_in [4:0] $end
    $var wire  5 H io_rd_out [4:0] $end
    $var wire  1 d io_regWrite_in $end
    $var wire  1 E io_regWrite_out $end
    $var wire 32 h reg_aluOutput [31:0] $end
    $var wire 32 g reg_dataOut [31:0] $end
    $var wire  1 f reg_memToReg $end
    $var wire  5 H reg_rd [4:0] $end
    $var wire  1 E reg_regWrite $end
    $var wire  1 "6 reset $end
   $upscope $end
   $scope module reg$ $end
    $var wire  1 "5 clock $end
    $var wire  5 H io_rd_sel [4:0] $end
    $var wire  1 E io_regWrite $end
    $var wire 32 I io_rs1 [31:0] $end
    $var wire  5 F io_rs1_sel [4:0] $end
    $var wire 32 0 io_rs2 [31:0] $end
    $var wire  5 G io_rs2_sel [4:0] $end
    $var wire 32 / io_writeData [31:0] $end
    $var wire 32 q registers_0 [31:0] $end
    $var wire 32 r registers_1 [31:0] $end
    $var wire 32 { registers_10 [31:0] $end
    $var wire 32 | registers_11 [31:0] $end
    $var wire 32 } registers_12 [31:0] $end
    $var wire 32 ~ registers_13 [31:0] $end
    $var wire 32 "! registers_14 [31:0] $end
    $var wire 32 "" registers_15 [31:0] $end
    $var wire 32 "# registers_16 [31:0] $end
    $var wire 32 "$ registers_17 [31:0] $end
    $var wire 32 "% registers_18 [31:0] $end
    $var wire 32 "& registers_19 [31:0] $end
    $var wire 32 s registers_2 [31:0] $end
    $var wire 32 "' registers_20 [31:0] $end
    $var wire 32 "( registers_21 [31:0] $end
    $var wire 32 ") registers_22 [31:0] $end
    $var wire 32 "* registers_23 [31:0] $end
    $var wire 32 "+ registers_24 [31:0] $end
    $var wire 32 ", registers_25 [31:0] $end
    $var wire 32 "- registers_26 [31:0] $end
    $var wire 32 ". registers_27 [31:0] $end
    $var wire 32 "/ registers_28 [31:0] $end
    $var wire 32 "0 registers_29 [31:0] $end
    $var wire 32 t registers_3 [31:0] $end
    $var wire 32 "1 registers_30 [31:0] $end
    $var wire 32 "2 registers_31 [31:0] $end
    $var wire 32 u registers_4 [31:0] $end
    $var wire 32 v registers_5 [31:0] $end
    $var wire 32 w registers_6 [31:0] $end
    $var wire 32 x registers_7 [31:0] $end
    $var wire 32 y registers_8 [31:0] $end
    $var wire 32 z registers_9 [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b111 &
b00 '
0(
b00 )
b00000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
0-
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000001000000000000100010011 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00 4
b00 5
06
07
08
09
0:
0;
0<
b0000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b000 B
0C
b00000 D
0E
b00000 F
b00000 G
b00000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000100 K
b00000000000000000000000000000000 L
0M
0N
b00000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000 T
b00000 U
b00000 V
0W
0X
0Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000 \
b00000000000000000000000000000000 ]
0^
b00 _
0`
0a
b00000 b
b00000000000000000000000000000000 c
0d
0e
0f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
0i
0j
b000000 k
b0000 l
0m
b00000000 n
b0000 o
0p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 ""
b00000000000000000000000000000000 "#
b00000000000000000000000000000000 "$
b00000000000000000000000000000000 "%
b00000000000000000000000000000000 "&
b00000000000000000000000000000000 "'
b00000000000000000000000000000000 "(
b00000000000000000000000000000000 ")
b00000000000000000000000000000000 "*
b00000000000000000000000000000000 "+
b00000000000000000000000000000000 ",
b00000000000000000000000000000000 "-
b00000000000000000000000000000000 ".
b00000000000000000000000000000000 "/
b00000000000000000000000000000000 "0
b00000000000000000000000000000000 "1
b00000000000000000000000000000000 "2
b0000000000 "3
b0000000000 "4
0"5
1"6
b00000000001000000000000100010011 "7
b00000000000000000000000000000000 "8
0"9
1":
#1
1"5
#2
0"5
#3
1"5
#4
0"5
#5
1"5
#6
0"5
#7
1"5
#8
0"5
#9
1"5
#10
0"5
0"6
#11
1%
b001 &
1(
b00000000001100010000000110010011 1
b00000000000000000000000000000010 3
19
b0010011 =
b00000000001000000000000100010011 >
b00000000000000000000000000000010 ?
b00000000000000000000000000000010 @
b00000000001000000000000000000000 A
b00010 G
b00000000000000000000000000000001 J
b00000000000000000000000000001000 K
b00000000000000000000000000000100 L
b00000000000000000000000000000100 S
b00010 T
b0001 l
b0001 o
b0000000001 "3
1"5
b00000000001100010000000110010011 "7
#12
0"5
#13
b00000000000000000000000000000010 ,
b00000000000000000000000000000010 .
b00000000001100011000000110110011 1
b00000000000000000000000000000011 3
b00000000001100010000000110010011 >
b00000000000000000000000000000011 ?
b00000000000000000000000000000011 @
b00000000001100010000000000000000 A
b00010 F
b00011 G
b00000000000000000000000000000010 J
b00000000000000000000000000001100 K
b00000000000000000000000000001000 L
b00000000000000000000000000000100 R
b00000000000000000000000000001000 S
b00011 T
b00010 V
b00000000000000000000000000000010 [
b00010 \
1^
1`
1m
b00010000 n
1p
b0000000010 "3
1"5
b00000000001100011000000110110011 "7
#14
0"5
#15
b000 &
0(
b00000000000000000000000000000010 +
b00000000000000000000000000000011 ,
b00000000000000000000000000000101 .
b00000000001100011000001000010011 1
b00000000000000000000000000000000 3
b01 4
09
b0110011 =
b00000000001100011000000110110011 >
b00000000001100011000000000000000 A
b00011 F
b00000000000000000000000000000011 J
b00000000000000000000000000010000 K
b00000000000000000000000000001100 L
b00000000000000000000000000001000 R
b00000000000000000000000000001100 S
b00010 U
b00011 V
b00000000000000000000000000000011 [
b00011 \
b00010 b
b00000000000000000000000000000010 c
1d
1i
b00011000 n
b0000000011 "3
1"5
b00000000001100011000001000010011 "7
b00000000000000000000000000000010 "8
#16
0"5
#17
b001 &
1(
b00000000000000000000000000000101 +
b00000000000000000000000000000101 ,
b00000000000000000000000000001010 .
b00000000000000000000000000000010 /
b00000000010100011000001010010011 1
b00000000000000000000000000000011 3
b01 5
19
b0010011 =
b00000000001100011000001000010011 >
b00000000000000000000000000000100 ?
1E
b00010 H
b00000000000000000000000000000100 J
b00000000000000000000000000010100 K
b00000000000000000000000000010000 L
b00000001 O
b00000000000000000000000000001100 R
b00000000000000000000000000010000 S
b00100 T
b00011 U
b00000000000000000000000000000000 [
0`
b00011 b
b00000000000000000000000000000101 c
b00000000000000000000000000000010 h
0i
b0010 o
0p
b0000000100 "3
b0000000001 "4
1"5
b00000000010100011000001010010011 "7
b00000000000000000000000000000101 "8
#18
0"5
#19
b00000000000000000000000000001010 +
b00000000000000000000000000000011 ,
b00000000000000000000000000001101 .
b00000000000000000000000000000101 /
b00000000010100100000001010110011 1
b00000000000000000000000000000101 3
b00000000010100011000001010010011 >
b00000000000000000000000000000101 ?
b00000000000000000000000000000101 @
b00000000010100011000000000000000 A
b00101 G
b00011 H
b00000000000000000000000000000101 J
b00000000000000000000000000011000 K
b00000000000000000000000000010100 L
b00000010 O
b00000000000000000000000000010000 R
b00000000000000000000000000010100 S
b00101 T
b00000000000000000000000000000011 [
b00100 \
1`
b00000000000000000000000000001010 c
b00000000000000000000000000000101 h
b0010 l
1p
b00000000000000000000000000000010 s
b0000000101 "3
b0000000010 "4
1"5
b00000000010100100000001010110011 "7
b00000000000000000000000000001010 "8
#20
0"5
#21
b000 &
0(
b00000000000000000000000000000101 ,
b00000000000000000000000000001111 .
b00000000000000000000000000001010 /
b00000000101000101000001100010011 1
b00000000000000000000000000000000 3
b10 4
b00 5
09
b0110011 =
b00000000010100100000001010110011 >
b00000000010100100000000000000000 A
b00100 F
b00000000000000000000000000000110 J
b00000000000000000000000000011100 K
b00000000000000000000000000011000 L
b00000011 O
b00000000000000000000000000010100 R
b00000000000000000000000000011000 S
b00101 V
b00000000000000000000000000000101 [
b00101 \
b00100 b
b00000000000000000000000000001101 c
b00000000000000000000000000001010 h
1i
b00100000 n
b00000000000000000000000000000101 t
b0000000110 "3
b0000000011 "4
1"5
b00000000101000101000001100010011 "7
b00000000000000000000000000001101 "8
#22
0"5
#23
b001 &
1(
b00000000000000000000000000001101 +
b00000000000000000000000000001111 ,
b00000000000000000000000000011100 .
b00000000000000000000000000001101 /
b00000000011000110000001010110011 1
b00000000000000000000000000001010 3
b01 5
19
b0010011 =
b00000000101000101000001100010011 >
b00000000000000000000000000000110 ?
b00000000000000000000000000001010 @
b00000000101000101000000000000000 A
b00101 F
b01010 G
b00100 H
b00000000000000000000000000000111 J
b00000000000000000000000000100000 K
b00000000000000000000000000011100 L
b00000000000000000000000000011000 R
b00000000000000000000000000011100 S
b00110 T
b00100 U
b00000000000000000000000000000000 [
0`
b00101 b
b00000000000000000000000000001111 c
b00000000000000000000000000001101 h
0i
b0101 l
0m
b00101000 n
b0011 o
0p
b00000000000000000000000000001010 t
b0000000111 "3
1"5
b00000000011000110000001010110011 "7
b00000000000000000000000000001111 "8
#24
0"5
#25
b000 &
0(
b00000000000000000000000000011100 +
b00000000000000000000000000001010 ,
b00000000000000000000000000100110 .
b00000000000000000000000000001111 /
b00000000011000110000001100110011 1
b00000000000000000000000000000000 3
b01 4
b00 5
09
b0110011 =
b00000000011000110000001010110011 >
b00000000000000000000000000000101 ?
b00000000000000000000000000000110 @
b00000000011000110000000000000000 A
b00110 F
b00110 G
b00101 H
b00000000000000000000000000001000 J
b00000000000000000000000000100100 K
b00000000000000000000000000100000 L
b00000111 O
b00000000000000000000000000011100 R
b00000000000000000000000000100000 S
b00101 T
b00101 U
b01010 V
b00000000000000000000000000001010 [
b00110 \
1`
b00000000000000000000000000011100 c
b00000000000000000000000000001111 h
1i
b0011 l
b00110000 n
b0010 o
1p
b00000000000000000000000000001101 u
b0000001000 "3
b0000000111 "4
1"5
b00000000011000110000001100110011 "7
b00000000000000000000000000011100 "8
#26
0"5
#27
b00000000000000000000000000100110 +
b00000000000000000000000000100110 ,
b00000000000000000000000001001100 .
b00000000000000000000000000011100 /
b00000000000000000000000000000000 1
b01 5
b00000000011000110000001100110011 >
b00000000000000000000000000000110 ?
b00000000000000000000000000001001 J
b00000000000000000000000000101000 K
b00000000000000000000000000100100 L
b00001001 O
b00000000000000000000000000100000 R
b00000000000000000000000000100100 S
b00110 T
b00110 U
b00110 V
b00000000000000000000000000000000 [
b00101 \
0`
b00110 b
b00000000000000000000000000100110 c
b00000000000000000000000000011100 h
b0011 o
0p
b00000000000000000000000000001111 v
b0000001001 "3
b0000001001 "4
1"5
b00000000000000000000000000000000 "7
b00000000000000000000000000100110 "8
#28
0"5
#29
0%
b111 &
b00000000000000000000000000100110 /
b10 4
b10 5
b0000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000 F
b00000 G
b00110 H
b00000000000000000000000000001010 J
b00000000000000000000000000101100 K
b00000000000000000000000000101000 L
b00010011 O
b00000000000000000000000000100100 R
b00000000000000000000000000101000 S
b00000 T
b00110 \
b00101 b
b00000000000000000000000001001100 c
b00000000000000000000000000100110 h
0i
b0000 l
b00000000 n
b0000 o
b00000000000000000000000000011100 v
b0000001010 "3
b0000010011 "4
1"5
b00000000000000000000000001001100 "8
#30
0"5
#31
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 .
b00000000000000000000000001001100 /
b00 4
b00 5
b00101 H
b00000000000000000000000000001011 J
b00000000000000000000000000110000 K
b00000000000000000000000000101100 L
b00000000000000000000000000101000 R
b00000000000000000000000000101100 S
b00000 U
b00000 V
b00000 \
0^
b00110 b
b00000000000000000000000001001100 h
b00000000000000000000000000100110 w
b0000001011 "3
1"5
#32
0"5
#33
b00110 H
b00000000000000000000000000001100 J
b00000000000000000000000000110100 K
b00000000000000000000000000110000 L
b00000000 O
b00000000000000000000000000101100 R
b00000000000000000000000000110000 S
b00000 b
b00000000000000000000000000000000 c
0d
b00000000000000000000000001001100 v
b0000001100 "3
b0000000000 "4
1"5
b00000000000000000000000000000000 "8
#34
0"5
#35
b00000000000000000000000000000000 /
0E
b00000 H
b00000000000000000000000000001101 J
b00000000000000000000000000111000 K
b00000000000000000000000000110100 L
b00000000000000000000000000110000 R
b00000000000000000000000000110100 S
b00000000000000000000000000000000 h
b00000000000000000000000001001100 w
b0000001101 "3
1"5
#36
0"5
#37
b00000000000000000000000000001110 J
b00000000000000000000000000111100 K
b00000000000000000000000000111000 L
b00000000000000000000000000110100 R
b00000000000000000000000000111000 S
b0000001110 "3
1"5
#38
0"5
#39
b00000000000000000000000000001111 J
b00000000000000000000000001000000 K
b00000000000000000000000000111100 L
b00000000000000000000000000111000 R
b00000000000000000000000000111100 S
b0000001111 "3
1"5
#40
0"5
#41
b00000000000000000000000000010000 J
b00000000000000000000000001000100 K
b00000000000000000000000001000000 L
b00000000000000000000000000111100 R
b00000000000000000000000001000000 S
b0000010000 "3
1"5
